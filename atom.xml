<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[!geek]]></title>
  <link href="http://tech.endeepak.com/atom.xml" rel="self"/>
  <link href="http://tech.endeepak.com/"/>
  <updated>2019-02-14T07:37:51+05:30</updated>
  <id>http://tech.endeepak.com/</id>
  <author>
    <name><![CDATA[Deepak Narayana Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cloju-re-alization]]></title>
    <link href="http://tech.endeepak.com/blog/2019/02/13/cloju-re-alization"/>
    <updated>2019-02-13T20:22:19+05:30</updated>
    <id>http://tech.endeepak.com/blog/2019/02/13/cloju-re-alization</id>
    <content type="html"><![CDATA[<p>This is a story of how learning clojure made me realize one of its selling points through subconscious thinking.</p>

<p>I had tried to learn clojure few times in the past and had dropped it because of the prefix notation for expressions and parentheses black-hole. Writing <code>(def y (+ (* m x) c)</code> felt very weird after expressing it as <code>y = m * x + c</code> during many years of education. I wasn&rsquo;t alone, many of my colleagues had similar feeling about clojure and pure functional programming languages.</p>

<!-- More -->


<p>Some of us attended a training by <a href="https://www.linkedin.com/in/rjaju/">clojure evangelist and expert</a> who recommended to keep an open mind in the beginning and learn the concepts by solving few basic problems using clojure. As part of this exercise, we wrote a function to find <code>factors</code> of a number which made me curious about extending it to find <code>prime-factors</code> of a number. My mind automatically started thinking of imperative programming approach and translating it to functional style in clojure.</p>

<p>After few minutes of dabbling, it seemed like a very hard(close to impossible) problem to solve in clojure. It made a dent in my confidence and I needed a fix. I decided to write it in imperative style first and quickly came up with below python program to regain part of my confidence :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_prime_factors</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="n">prime_factors</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">):</span>
</span><span class='line'>            <span class="n">prime_factors</span> <span class="o">+=</span> <span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">get_prime_factors</span><span class="p">(</span><span class="n">n</span><span class="o">/</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">prime_factors</span>
</span><span class='line'><span class="c"># not the most optimal solution, but proved I can code function to find prime factors :)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As it was close to end of the day(&amp; week), my mind dropped this problem there. But my subconscious mind hadn&rsquo;t let go of this problem and started giving me this hint at the end of a good night sleep. I needed to breakdown the problem into smaller abstractions i.e prime factors of number is smallest prime factor of the number and prime factors of the quotient. This is the code I wrote in clojure after this sudden flash of thoughts</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">divisible?</span> <span class="p">[</span><span class="nv">n</span>, <span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nb">rem </span><span class="nv">n</span> <span class="nv">x</span><span class="p">))</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">find-first</span> <span class="p">(</span><span class="nb">comp first </span><span class="nv">filter</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">smallest-prime-factor</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">find-first</span> <span class="o">#</span><span class="p">(</span><span class="nf">divisible?</span> <span class="nv">n</span> <span class="nv">%1</span><span class="p">)</span> <span class="p">(</span><span class="nb">range </span><span class="mi">2</span>, <span class="p">(</span><span class="nb">+ </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">prime-factors</span> <span class="p">[</span><span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt;= </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">()</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">smallest-prime-factor</span> <span class="p">(</span><span class="nf">smallest-prime-factor</span> <span class="nv">n</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">concat </span><span class="p">[</span><span class="nv">smallest-prime-factor</span><span class="p">]</span> <span class="p">(</span><span class="nf">prime-factors</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">n</span> <span class="nv">smallest-prime-factor</span><span class="p">))</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This made me realise, the imperative code I had written earlier was more complex to digest the concept of prime factors when compared to the clojure code. If I have to write this function again in any other language, I would definitely break it down to abstractions defined in the clojure function above. In a way, clojure was making it harder to write bad code!</p>

<p>Well, this was my #cloju-re-alization. What is yours? Leave a comment below or write your own blog post and share</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring DB backups using prometheus]]></title>
    <link href="http://tech.endeepak.com/blog/2017/12/22/monitoring-db-backups-using-prometheus"/>
    <updated>2017-12-22T14:19:02+05:30</updated>
    <id>http://tech.endeepak.com/blog/2017/12/22/monitoring-db-backups-using-prometheus</id>
    <content type="html"><![CDATA[<p>Ensuring correct database backups taken at regular interval is very critical for disaster recovery. Recent <a href="https://about.gitlab.com/2017/02/01/gitlab-dot-com-database-incident/">gitlab database incident</a> re-emphasizes this fact. <a href="https://about.gitlab.com/">Gitlab</a> was very transparent about this and <a href="https://gitlab.com/gitlab-com/www-gitlab-com/issues/1108">documented</a> approaches for preventing these failures</p>

<p>The preventive measures include, monitoring -</p>

<ul>
<li><em>Backup file is created in every x interval</em>: Catches backups not being uploaded due to backup script error or scheduling error</li>
<li><em>Size of latest backup file is at-least y bytes</em>: Catches erroneous backup file uploaded due to script error</li>
</ul>


<!-- More -->


<p>In our case, DB backups are uploaded to Azure blob storage(similar to AWS S3) and <a href="https://prometheus.io/">prometheus</a> is used for monitoring</p>

<p>High level design</p>

<ul>
<li>Run an exporter which can expose metrics such as <code>latest_file_timestamp</code> and <code>latest_file_size</code> for each blob container where backup files are uploaded</li>
<li>Alert if <code>current_time - latest_file_timestamp &gt; backup_interval</code> or <code>latest_file_size &lt; expected_backup_file_size</code></li>
</ul>


<p>As we couldn&rsquo;t find any existing exporter, we wrote <a href="https://github.com/project-sunbird/prometheus-azure-blob-exporter">prometheus-azure-blob-exporter</a> to capture following metrics</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Last modified timestamp(milliseconds) for latest file in container
</span><span class='line'>azure_blob_latest_file_timestamp{container="postgresql-backup"} 1508707802000.0
</span><span class='line'># Size in bytes for latest file in container
</span><span class='line'>azure_blob_latest_file_size{container="postgresql-backup"} 5606443.0</span></code></pre></td></tr></table></div></figure>


<p>Alerts are defined as</p>

<ul>
<li>Check backup is created every day</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 24 hours + 1 hour slack time for backup process
</span><span class='line'># threshold_interval_in_milliseconds =&gt; 25 * 60 * 60 * 1000 =&gt; 90000000
</span><span class='line'>ALERT backup_is_too_old
</span><span class='line'>  IF (time() * 1000) - azure_blob_latest_file_timestamp &gt; 90000000
</span><span class='line'>  FOR 5m
</span><span class='line'>  ANNOTATIONS {
</span><span class='line'>      summary = "Backup is too old",
</span><span class='line'>      description = "There is no backup file created for a day in ",
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Check latest backup file created has minimum size of 1MB</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># threshold_size_in_bytes =&gt; 1MB =~ 1000000
</span><span class='line'>ALERT backup_size_is_too_small
</span><span class='line'>  IF azure_blob_latest_file_size &lt; 1000000
</span><span class='line'>  FOR 5m
</span><span class='line'>  ANNOTATIONS {
</span><span class='line'>      summary = "Backup size is too small",
</span><span class='line'>      description = "Latest backup file is smaller than 1MB in ",
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>Please checkout the <a href="https://github.com/project-sunbird/prometheus-azure-blob-exporter">github repo</a> for more details</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To cron or not to cron]]></title>
    <link href="http://tech.endeepak.com/blog/2017/12/22/to-cron-or-not-to-cron"/>
    <updated>2017-12-22T12:16:01+05:30</updated>
    <id>http://tech.endeepak.com/blog/2017/12/22/to-cron-or-not-to-cron</id>
    <content type="html"><![CDATA[<p>Using crontab for scheduling background jobs like database backup, purging old data is a common practice in lot of IT organizations. As these jobs are running in background, failures can get missed easily without proper monitoring. In most cases, failures occur due to an error in job script and some times due to mistakes in cron configuration</p>

<!-- More -->


<p>Monitoring short lived cron jobs are not straight forward compared to monitoring long running services like web services. These are few well-known mechanisms for alerting cron job failures</p>

<ul>
<li>Cron job writes to a file on success. Monitoring system regularly reads this file and alerts based on last modified time-stamp of the file -[<a href="https://serverfault.com/questions/33145/techniques-to-monitor-cron-tasks">Refer</a>]</li>
<li>Cron job pings a <a href="https://deadmanssnitch.com/">monitoring service</a> on success. This monitoring service acts as a <a href="https://en.wikipedia.org/wiki/Dead_man%27s_switch">dead man&rsquo;s switch</a> and alerts if there was no call made by the job within expected time interval</li>
</ul>


<h3>Pragmatic alternative for crontab</h3>

<p>If you have a CI server like jenkins in your infrastructure, one of the approach that has worked well for us is - create a scheduled job in jenkins with slack/email notifications on failures.</p>

<p>Advantages of this approach</p>

<ul>
<li>Simpler to setup and effective for catching job script failures</li>
<li>UI to check job output and history of previous runs</li>
<li>Ability to manually trigger the job when needed</li>
</ul>


<h3>Important note</h3>

<p>Whether you use scheduled jobs in crontab or jenkins, you shouldn&rsquo;t depend only on the job&rsquo;s exit status for determining success - [<a href="https://about.gitlab.com/2017/02/01/gitlab-dot-com-database-incident/">Refer</a>]. It is important to have alerting based on expected state of the system after job execution. <em>Example</em>: Timestamp of latest backup file uploaded to backup storage, minimum size of the backup file etc</p>

<p><strong>UPDATE</strong>: Checkout <a href="https://tech.endeepak.com/blog/2017/12/22/monitoring-db-backups-using-prometheus/">Monitoring DB backups using prometheus</a> for more details on monitoring DB backups</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker swarm in production]]></title>
    <link href="http://tech.endeepak.com/blog/2017/12/22/docker-swarm-in-production"/>
    <updated>2017-12-22T09:58:33+05:30</updated>
    <id>http://tech.endeepak.com/blog/2017/12/22/docker-swarm-in-production</id>
    <content type="html"><![CDATA[<p>This is a experience report on using docker swarm(17.06) in production for ~3 months</p>

<h3>Context</h3>

<p>Prior to this, we were deploying services on VMs using ansible. For a new project, we wanted to explore benefits of running service as containers and decided to use docker swarm due to its simpler setup and consistency with docker engine APIs</p>

<!-- More -->


<h3>Benefits</h3>

<p>Using container orchestration engine to run services provided following benefits</p>

<ul>
<li>Cleaner boundary between Developers building/packaging the services and DevOps team providing platform for running these services. It is a great cultural shift for the organization!</li>
<li>Consistent way to operate services - start/stop, find logs, scale. This makes it easier to operate</li>
<li>Implementing cross cutting concerns like log aggregation, monitoring gets easier due to consistency</li>
<li>Promotes stateless &amp; immutable infrastructure. It is easier to setup new environments &amp; tear down as and when needed</li>
<li>You can achieve better resource utilization with same level of isolation compared to running services on VMs. Helps overcoming resource management issues when running services in public cloud VMs - which doesn&rsquo;t allow fine gained control on customizing memory, CPU and network resources for a service</li>
</ul>


<p>Docker swarm specific</p>

<ul>
<li>Easy to setup &amp; operate - single binary/service has all the bells and whistles</li>
<li>Smaller learning curve due to API consistency with the standalone docker engine</li>
<li>Built in <a href="https://docs.docker.com/engine/swarm/networking/#configure-service-discovery">service discovery</a>(via DNS)</li>
<li>Built in <a href="https://docs.docker.com/engine/swarm/ingress/">load balancing</a> across service replicas using battle tested Linux services like IPVS. Load balancing is based on health of the instance determined by <a href="https://docs.docker.com/compose/compose-file/#healthcheck">health checks</a> defined for the service</li>
<li>Support for distributed <a href="https://docs.docker.com/engine/swarm/configs/">configuration</a> and <a href="https://docs.docker.com/engine/swarm/secrets/">secrets</a></li>
<li>Support for <a href="https://docs.docker.com/compose/compose-file/#update_config">rolling upgrades</a></li>
</ul>


<h3>Challenges</h3>

<ul>
<li>Sometimes you&rsquo;ll run into issues <a href="https://github.com/moby/moby/issues/34163">moby#34163</a>, <a href="https://github.com/moby/moby/issues/25432">moby#25432</a> during deployments. Having a <a href="https://github.com/project-sunbird/sunbird-devops/wiki/Docker-swarm-troubleshooting">play-book</a> will help in faster recovery from these failures</li>
<li>Issues in overlay networking(<a href="https://github.com/docker/swarm/issues/2161">swarm#2161</a>) can make few containers unreachable some times. Having good monitoring is essential for identification and remediation of these issues</li>
<li>Rolling update is harder to achieve if you are using docker config/secret. Swarm doesn&rsquo;t support updating config/secret. You would have create new config(with new version number) &amp; update the service to use new version of config. It would have been good if this was handled internally using checksum of the config</li>
</ul>


<h3>Conclusion</h3>

<p>Overall, using a container orchestration engine in production has proven to be very productive and useful. Docker swarm is maturing over time, with improved stability it is a promising platform for running containers in production</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Joy of finding a math series]]></title>
    <link href="http://tech.endeepak.com/blog/2017/10/28/joy-of-finding-a-math-series"/>
    <updated>2017-10-28T12:46:47+05:30</updated>
    <id>http://tech.endeepak.com/blog/2017/10/28/joy-of-finding-a-math-series</id>
    <content type="html"><![CDATA[<p>I was trying to come up with a question for preliminary logic round for interviewing. I decided to form a tricky math series and tried to figure out 2 math series which looks same in the beginning and diverges after a while. Something on the lines of</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>series x =&gt; x1, x2, x3, x4, x5
</span><span class='line'>series y =&gt; y1, y2, y3, y4, y5
</span><span class='line'>
</span><span class='line'>where x1=y1, x2=y2, x3=y3 and x4!=y4, x5!=y5</span></code></pre></td></tr></table></div></figure>


<p>So the question could be</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Write the missing number in below series
</span><span class='line'>x1, x2, x3, ? , y5</span></code></pre></td></tr></table></div></figure>




<!-- More -->


<p>To figure out these series, my approach was to start with some series x and find a pattern which doesn&rsquo;t hold good after few numbers. After few unsuccessful attempts, tried my luck with series of squares</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1, 4, 9, 16, 25, ...</span></code></pre></td></tr></table></div></figure>


<p>Voilà! difference of consecutive squares were not only a odd number, they were consecutive odd numbers. Tried it for a long series and found it true for all the squares!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1-0, 4-1, 9-4, 16-9, 25-16,... =&gt; 1, 3, 5, 7, 9,..</span></code></pre></td></tr></table></div></figure>


<p>From what I knew of squares of numbers, this wasn&rsquo;t very obvious. I was very excited to check if this is already known or I was the first one to discover this :). Simple web search presented ton of articles on this observation.</p>

<p>That was disappointing but reading this <a href="http://mathcentral.uregina.ca/QQ/database/QQ.09.99/nghiem1.html">link</a> about a mathematician appreciating a student&rsquo;s effort in similar finding was comforting and encouraging to carry on with my quest</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evolution of monitoring systems]]></title>
    <link href="http://tech.endeepak.com/blog/2017/10/21/evolution-of-monitoring-systems"/>
    <updated>2017-10-21T19:54:38+05:30</updated>
    <id>http://tech.endeepak.com/blog/2017/10/21/evolution-of-monitoring-systems</id>
    <content type="html"><![CDATA[<p>Monitoring systems have evolved over time to support evolving architecture styles and deployment strategies</p>

<h2>Generation X+1: Monolithic applications, Bare metal servers</h2>

<p>This was the era where you would have single deployable unit for whole application (labeled as monolithic now). Application and the database would be deployed on a known set of bare metal servers. Vertical scaling was more favorable option for scaling</p>

<!-- More -->


<p><a href="https://www.nagios.org">Nagios</a> was(probably still is) the widely used open source monitoring software in this era. You would configure a list of known severs the monitoring system needs to probe to determine the health of the system. This system was simple to configure &amp; operate</p>

<p><img class="center" src="http://tech.endeepak.com/images/evolution-of-monitoring-systems/nagios-architecture.png"></p>

<p><em>Image Credit:</em> <a href="https://support.nagios.com/kb/article.php?id=141">https://support.nagios.com/kb/article.php?id=141</a></p>

<h2>Generation X+2: Service Oriented Architecture, VMs on the Cloud</h2>

<p>Managing monolithic applications became painful as the businesses grew. Service Oriented Architecture(SOA) became mainstream in this era. Cloud services like AWS made it very easy to launch new VMs for deploying services. Configuration management tools like puppet, ansible made it easy to deploy applications across large number of servers. <a href="https://martinfowler.com/bliki/ImmutableServer.html">Immutable server pattern</a> was evangelized by <a href="https://medium.com/netflix-techblog/how-we-build-code-at-netflix-c5d9bd727f15">well known companies</a>.</p>

<p>Horizontal scalability started becoming more favorable option for scaling. One could bring up new instances of service by launching VMs from a image(eg: AMIs) and bring down VMs easily depending on the load on the system. This deployment architecture demanded a monitoring system which can handle this dynamicity.</p>

<p>Monitoring systems like <a href="https://sensuapp.org/">Sensu</a> solved this issue with a different architecture style. Instead of a central server probing a static list of servers, sensu had a publish &amp; subscription model using RabbitMQ. The monitoring agent running on the application server subscribes to monitoring check messages relevant for the service and pushes the results via same messaging system. Monitoring server itself was horizontally scalable to handle varying load</p>

<p><img class="center" src="http://tech.endeepak.com/images/evolution-of-monitoring-systems/sensu-architecture.gif"></p>

<p><em>Image Credit</em>: <a href="https://sensuapp.org/docs/1.0/overview/architecture.html">https://sensuapp.org/docs/1.0/overview/architecture.html</a></p>

<h2>Generation X+3: Micro services, Container orchestration engines</h2>

<p>Micro services are becoming mainstream now. Deploying stateless services as containers has made the concept of immutable servers very easy and efficient compared to using VMs. Container orchestration engines like kubernetes, docker swarm have made it easy to run and manage large number of services running as containers inside a cluster of servers. These orchestration engines also provide benefits like auto healing(restart on failure), easy to scale, in-built service discovery &amp; load balancing.</p>

<p>Monitoring systems like sensu doesn&rsquo;t fit well in this setup. Running a monitoring agent alongside the application process in a container adds <a href="https://devops.stackexchange.com/questions/447/why-it-is-recommended-to-run-only-one-process-in-a-container">additional complexity</a> in containers. As service discovery is provided by container orchestration engines, there is no need for adding complexity of running messaging system for solving discovery problem</p>

<p>During the time when Google open sourced kubernetes(most popular container orchestration engine as of now), a new monitoring system - <a href="https://prometheus.io">Prometheus</a> (built by ex-googlers in soundcloud) started gaining lot of traction. Prometheus leverages service discovery mechanisms for registering services to be monitored. It has a lot simpler setup and smaller resource requirements compared to system like sensu. Prometheus factored the containers ecosystem and fits very well for the job. The scalability argument against pull model of monitoring was also <a href="https://prometheus.io/blog/2016/07/23/pull-does-not-scale-or-does-it/">addressed</a> by the authors of the system.</p>

<p><img class="center" src="http://tech.endeepak.com/images/evolution-of-monitoring-systems/prometheus-architecture.svg"></p>

<p><em>Image Credit</em>: <a href="https://prometheus.io/docs/introduction/overview/">https://prometheus.io/docs/introduction/overview/</a></p>

<h2>Conclusion</h2>

<p>If you are building a new system with architecture patterns and deployment strategies of this era, <a href="https://prometheus.io">Prometheus</a> is a leading choice among open source monitoring systems</p>

<p><em>PS</em>: There are lot of good things(and few limitations) about prometheus which deserves separate blog post :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple obstacle avoiding robot using arduino]]></title>
    <link href="http://tech.endeepak.com/blog/2016/01/02/simple-obstacle-avoiding-robot-using-arduino"/>
    <updated>2016-01-02T16:25:48+05:30</updated>
    <id>http://tech.endeepak.com/blog/2016/01/02/simple-obstacle-avoiding-robot-using-arduino</id>
    <content type="html"><![CDATA[<p>Building obstacle avoiding robot is a simple &amp; fun way to start learning arduino and electronics. A lot of useful articles explain this, but you will be blocked if you can&rsquo;t get the same parts in your region. In this post, I&rsquo;ll explain how to build a simple and minimal robot using the parts available online in India.</p>

<p>Watch the below video to get an idea of what you could build by following this article.</p>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/zFlNvsFM9kY" allowfullscreen></iframe></div>




<!-- More -->


<h3>High level approach</h3>

<p>We&rsquo;ll be using a sensor to detect an obstacle in front of robot. Depending on the sensor input we&rsquo;ll control the motor wheels of robot to either move forward or turn aside.</p>

<h3>Prerequisites</h3>

<ul>
<li><a href="http://www.amazon.in/dp/B008GRTSV6">Arduino UNO</a> or its <a href="http://www.amazon.in/dp/B00H1HR576">clone</a></li>
<li><a href="http://www.amazon.in/dp/B00YAD181I">HC-SR04 Ultra sonic sensor</a></li>
<li><a href="http://www.amazon.in/dp/B00Q4Q1Q6Q">Robot chassis + 2 DC Motors with holder + 2 Wheels + 1 Castor Wheel + Screws &amp; Nuts</a></li>
<li><a href="http://www.amazon.in/dp/B00LMY58TG">L293D motor driver</a></li>
<li><a href="http://www.amazon.in/dp/B00N23YNA0">Basic electronics kit</a> contains breadboard, connecting wires, battery &amp; other small useful items</li>
<li>Jumper Wires: <a href="http://www.amazon.in/dp/B00SJHYN4K">Male to Male</a>, <a href="http://www.amazon.in/dp/B0124BZ56Q">Male to Female</a></li>
<li>Power source: 5V power bank or 5V battery pack (I used a phone charger power bank I had already)</li>
<li>Tools: Screw driver, Scissor / Wire stripper</li>
<li>Softwares: <a href="https://www.arduino.cc/en/Main/Software">Arduino IDE</a></li>
</ul>


<h2>Steps</h2>

<p>Follow the steps in the order below. If you get stuck at any point, refer to the <a href="#troubleshooting">troubleshooting</a> section.</p>

<h3>Step 1 : Get to know arduino and electronics basics</h3>

<p>If you are new to arduino, try out few <a href="https://www.arduino.cc/en/Tutorial/BuiltInExamples">basic examples</a></p>

<ul>
<li><a href="https://www.arduino.cc/en/Tutorial/Blink">blinking led</a> to learn controlling output</li>
<li><a href="https://www.arduino.cc/en/Tutorial/DigitalReadSerial">push button</a> to learn reading input &amp; basic serial output for trouble shooting</li>
<li><a href="https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard">How to use breadboard</a> (vertical power rails vs horizontal terminal strips)</li>
</ul>


<h3>Step 2: Connect ultrasonic sensor to detect obstacle</h3>

<h5>2.1: Connect the circuit as shown below</h5>

<p><img class="center" src="http://tech.endeepak.com/images/obstacle-avoiding-robot-stage-1.jpg"></p>

<h5>2.2: Add NewPing library to read distance.</h5>

<ul>
<li>Download the NewPing library as zip <a href="https://bitbucket.org/teckel12/arduino-new-ping/downloads">here</a></li>
<li>In Arduino IDE go to menu Sketch -> Include Library -> Add .ZIP as library -> Choose the downloaded zip file</li>
</ul>


<h5>2.3: Upload the below code to arduino</h5>

<script src="https://gist.github.com/endeepak/f816adad5867ee78551c.js"></script>


<h5>2.4: Test the distance measured by sensor</h5>

<ul>
<li>In Arduino IDE go to menu Tools -> Serial Monitor</li>
<li>Move an obstacle in front of sensor and test that correct distance is printed on serial monitor</li>
</ul>


<h3>Step 3: Assemble the robot chassis and test the motors &amp; wheels</h3>

<ul>
<li>The robot chassis needs to be assembled by looking at the <a href="http://www.amazon.in/dp/B00Q4Q1Q6Q">images in purchased website</a>. Bare minimum you should have the chassis base assembled with motors and wheels</li>
<li>Cut 4 pieces of connecting wires each of length 15-20 centimeters and strip out both ends of the wire 1-2 centimeters</li>
<li>Take 2 wires &amp; connect one end of each wire to 2 connection slots of the motor. Repeat the same with other 2 wires using 2nd motor</li>
<li>Take out a battery (it will be in basic electronics kit) and test motor wheel rotation by connecting other ends of the wires to battery</li>
</ul>


<h3>Step 4: Program L293D motor driver to control the wheels</h3>

<h4>4.1: Connect the L293D motor to arduino</h4>

<p>I couldn&rsquo;t get a fritzing diagram for this circuit since I don&rsquo;t have the SVG for the part purchased. I&rsquo;ll list the connections needed to get it running</p>

<ul>
<li>Connect 2 wires from one motor to 2 slots in M1 and other 2 wires from other motor to slots in M2</li>
<li>Connect 5V and 12V on L293D to power line(Red) on breadboard</li>
<li>Connect GND on L293D to GND line(Black) on breadboard</li>
<li>Connect C1-A, C1-B on L293D to pins 2 &amp; 3 respectively on arduino. These are motion control pins for Motor 1</li>
<li>Connect C2-A, C2-B on L293D to pins 7 &amp; 8 respectively on arduino. These are motion control pins for Motor 2</li>
<li>Connect EN1 and EN2 on L293D to power line(Red) on breadboard. These are enable pins for Motor 1 and Motor 2 respectively. HIGH voltage(power) enables the motor and LOW voltage(GND) disables the motor</li>
</ul>


<p>The connection should look somewhat like the image below</p>

<p><img class="center" src="http://tech.endeepak.com/images/obstacle-avoiding-robot-stage-2.jpg"></p>

<p>Please refer to <a href="http://www.amazon.in/dp/B00LMY58TG">images in purchased website</a> for additional technical details</p>

<h4>4.2: Upload the below code to arduino</h4>

<script src="https://gist.github.com/endeepak/5b3395c1be5597397fdc.js"></script>


<h4>4.2: Test the wheel movement control</h4>

<ul>
<li>The <code>loop</code> function initially tests the <code>move_forward</code> function. Check both wheels are moving in forward direction.</li>
<li>If any of the motor wheels are rotating in wrong direction swap the connections in M1 or M2 depending on malfunctioning motor</li>
<li>Change the line in <code>loop</code> function to and replace <code>move_forward</code> with other methods like drive_backward, turn_left, turn_right to test they work as expected</li>
</ul>


<h3>Step 5: Integrate sensor input to control the bot movement</h3>

<p>Upload the below code which has logic to move the robot depending on distance of the obstacle. Feel free to change the obstacle distance or delay or the rotation angle as per your motor speed</p>

<script src="https://gist.github.com/endeepak/87c703fea2ad4e1eede2.js"></script>


<h3>Step 6: Test it in the field and celebrate!</h3>

<ul>
<li>So far you would have used USB from your laptop as power source for arduino. Now you should use a power bank or 5V battery pack to test your robot in the field</li>
<li>If everything works, run around&hellip;jump up &amp; down&hellip;shout to the sky&hellip;any other way to celebrate the hard earned victory :)</li>
</ul>


<h3>Step 7: Enhancements</h3>

<p>These are optional enhancements that I wanted to try but didn&rsquo;t an opportunity to try</p>

<ul>
<li>The robot speed can be increased by connecting a 12V battery as power source for L293D</li>
<li>The accuracy of obstacle detection can be increased by using couple of IR sensors at corners OR by using a servo to rotate the ultrasonic sensor for reading obstacles in the corners</li>
<li>Attach leds, buzzers, laser, add a custom body to make it look like WALL-E or other funky stuff to add more jazziness the vehicle</li>
<li>Send it to Mars or Do anything else you can imagine to save or end the human race</li>
</ul>


<p>The code and fritzing diagram is also shared on <a href="https://github.com/endeepak/arduino-projects/tree/master/obstacle_detection_robot">github repo</a></p>

<p><a id="troubleshooting"></a></p>

<h3>Troubleshooting</h3>

<ul>
<li>Double check the pin number you have connected to on arduino. You might have connected to to the wrong pin because of the angle at your are looking at these circuits. Count the pin numbers slowly to ensure you are connected to pin number x and not x + 1 or x - 1</li>
<li>Double check the breadboard slots in which you have plugged in the wires or devices. Push the wires or devices to ensure they are plugged in firmly</li>
<li>Test if the breadboard slots to which you have plugged-in works properly. Use a buzzer or other small equipments which can handle 5V to to test them out (Don&rsquo;t use led without a resistor). I had an issue where some of the pin slots in in power rails were not working due to defective board</li>
<li>Test the components such as wires, sensors, motors individually and ensure they work properly when used independently</li>
<li>If nothing helps, google is your friend</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Soft delete and unique constraint]]></title>
    <link href="http://tech.endeepak.com/blog/2015/10/19/soft-delete-and-unique-constraint"/>
    <updated>2015-10-19T17:59:41+05:30</updated>
    <id>http://tech.endeepak.com/blog/2015/10/19/soft-delete-and-unique-constraint</id>
    <content type="html"><![CDATA[<p>This post describes a robust solution and other alternatives for having unique constraint at DB level for a table with soft deleted rows.</p>

<h2>Problem Context</h2>

<p>The system identifies the users by their mobile number and hence mobile number must be unique across users. The users are soft deleted in the system by updating column <code>deleted = 1</code>. A new user can register in with same mobile number as previously deactivated user (since mobile numbers are recycled by telecoms). The unique check at application are susceptible to fail in case of concurrent requests, unique constraint is needed at DB to ensure integrity of data.</p>

<!-- More -->


<h2>The solution should</h2>

<ul>
<li>work for existing rows imported from legacy system</li>
<li>work across different databases supported by product</li>
</ul>


<p>We were able to find different flavors of solutions on net but they were incomplete for our case. They only served as starting point to a solution that meets all of our needs mentioned above.</p>

<h2>The Final Solution</h2>

<ul>
<li>Add a new column <code>deletion_token</code></li>
<li>Add unique constraint for combination <code>mobile_number, deletion_token</code></li>
<li>A new row added to table would have value of &lsquo;NA&rsquo; <code>deletion_token</code>. This is ensured by setting up default value of <code>NA</code> at DB level and having constructor of User model(used by ORM) to initialize <code>deletion_token</code> to <code>NA</code> by default</li>
<li>Insert a random UUID for soft deleted</li>
<li>On soft delete of user, generate new UUID and set it on <code>deletion_token</code></li>
</ul>


<h2>Path to the above solution</h2>

<ol>
<li><p>Add unique constraint for columns <code>mobile_number, deleted</code>
<em>Drawback</em>: This wouldn&rsquo;t allow us to have more than one deleted user with same mobile number</p></li>
<li><p>Add a unique constraint with a where clause eg: <code>ADD CONSTRAINT .... WHERE deleted != 1;</code>
<em>Drawback</em>: The where clause in constraint definition is not supported by <a href="http://stackoverflow.com/a/20962904/69362">all databases</a></p></li>
<li><p>Instead of using only 0 or 1 as values for deleted column, increment the number on each delete.
<em>Drawback</em>: Expensive as it needs extra db call to retrieve previously soft deleted rows and also expensive to update numbers for existing soft deleted rows in legacy system. It would theoretically fail for concurrent requests without lock.</p></li>
<li><p>Add a new time-stamp column  called <code>deleted_at</code> and add an unique constraint on <code>mobile_number, deleted_at</code> <em>Drawback</em>: The old rows in legacy system didn&rsquo;t have data for <code>deleted_at</code> and populating with dummy data wasn&rsquo;t acceptable.</p></li>
<li><p>Add a new column  called <code>deletion_token</code> and add a constraint on <code>mobile_number, deletion_token</code> with NULL value for new rows and UUID for soft deleted rows.
<em>Drawback</em>: Few databases don&rsquo;t consider nulls as equal and hence unique constraint does not fail for two rows with same mobile number and NULL value in <code>deletion_token</code></p></li>
<li><p>Slight modification to point 5, to arrive at the final solution described in the beginning of the post</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working software is worth thousand assurances]]></title>
    <link href="http://tech.endeepak.com/blog/2015/09/13/working-software-is-worth-thousand-assurances"/>
    <updated>2015-09-13T19:09:14+05:30</updated>
    <id>http://tech.endeepak.com/blog/2015/09/13/working-software-is-worth-thousand-assurances</id>
    <content type="html"><![CDATA[<p>In the beginning of a software project, every one starts with a big list of features. If you ask the product owner, what is the minimum set of features that we can go live with? most of the times you&rsquo;ll hear a lot more than you expected.</p>

<p>It gets lot harder to talk about minimum scope when you are rewriting an existing software. We would usually want to go live with the minimum viable product(MVP) and build reset of it incrementally. If people are new to agile methodologies, these questions on reducing scope might look stupid &amp; annoying. Fortunately there are ways to get these questions answered, I&rsquo;m sharing my experience from couple of projects in past few years.</p>

<p>Lets start with a story, where we are writing a new version of the popular website.</p>

<!-- More -->


<h3>Stage 1: Inception / Discovery</h3>

<pre>
Team: According to the stats, features X & Y used only by 5%. 
      Can we deprioritize it for first release?
      We can redirect to old site for users who need them.
Product owners: No! Everything goes live or nothing does.
</pre>


<p>Start with implementing walking skeleton<a href="http://alistair.cockburn.us/Walking+skeleton">[1]</a> <a href="http://blog.codeclimate.com/blog/2014/03/20/kickstart-your-next-project-with-a-walking-skeleton/">[2]</a> to validate the approach. After first few iterations showcase,</p>

<h3>Stage 2: Walking skeleton is ready</h3>

<pre>
Team: We have the thin slice of end to end user journey. This is how it works.
Product owners: Wow, thats great. Whats left then?
Team: This one does not handle some of these rare scenarios. Lets prioritize what is needed.
</pre>


<p>Prioritize the backlog to do most important features first. Few weeks before planned release for all features, ask the question again</p>

<h3>Stage 3 : Important features are production ready (MVP)</h3>

<pre>
Team: We have everything except feature X & Y. It would take another month for implementing X & Y. 
      Can we go live with users who need X & Y being redirected to old site?
Product owners: Lets go live!! We need to go there before our competitors
</pre>


<h2>Moral of the stor(y/ies):</h2>

<ul>
<li><p>You can&rsquo;t get all the answers in the beginning. Prioritize your backlog to do the most important features first. Ask your unanswered question(s) again after each milestone, you&rsquo;ll be surprised to see how easy it is to get the answers this time.</p></li>
<li><p>It is hard for people to understand the benefits of agile methodologies, kanban etc when it is just theory based on your  past experiences which they can&rsquo;t relate to. Build something small &amp; tangible, show the working software to build their confidence.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python's elegance in dynamic methods compared to ruby]]></title>
    <link href="http://tech.endeepak.com/blog/2014/12/27/ruby-method-missing-vs-python-getattr"/>
    <updated>2014-12-27T16:48:17+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/12/27/ruby-method-missing-vs-python-getattr</id>
    <content type="html"><![CDATA[<p>I have been a ruby fanboy for a long time because of its expressiveness and elegance in defining DSLs. One of the scary thing in ruby is, when you implement <code>method_missing</code> you need to make sure to implement <code>respond_to_missing?</code>, otherwise <a href="http://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding">bad things will happen to you</a>. The below ruby example shows minimal parts recommended for providing dynamic methods</p>

<!-- More -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Foo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">method_name</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;bar_&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="c1">#do_some_thing...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># You should define this for your good</span>
</span><span class='line'>  <span class="c1"># Read http://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding for more details</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">respond_to_missing?</span><span class="p">(</span><span class="n">method_name</span><span class="p">)</span>
</span><span class='line'>      <span class="n">method_name</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;bar_&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="k">super</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># So that following will work consistently</span>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="no">Foo</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">bar_qux</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">bar_qux</span><span class="p">()</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:bar_qux</span><span class="p">)</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="ss">:bar_qux</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The same can be achieved in python using <code>__getattr__</code> with lesser code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Foo</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">attr</span><span class="p">):</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">attr</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;bar_&#39;</span><span class="p">):</span>
</span><span class='line'>          <span class="c">#return method or an attribute..</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Following will work consistently</span>
</span><span class='line'><span class="n">foo</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">()</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">bar_qux</span>
</span><span class='line'><span class="n">foo</span><span class="o">.</span><span class="n">bar_qux</span><span class="p">()</span>
</span><span class='line'><span class="nb">hasattr</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="s">&#39;bar_qux&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Eventhough it isn&rsquo;t a lot of code in ruby, people can forget to implement both methods or implement them differently by mistake leading to tricky bugs and higher maintenance cost.</p>

<h3>Can ruby have a similar implementation?</h3>

<p>May be not. It is because of the fact that ruby functions are not first class objects which can be returned in a single method_missing hook. Also ruby&rsquo;s syntax of calling a method without parenthesis(i.e. <code>foo.bar_qux</code> is same as <code>foo.bar_qux()</code>) makes it hard to treat functions as callable objects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common mistakes while switching from ruby to python]]></title>
    <link href="http://tech.endeepak.com/blog/2014/12/17/common-mistakes-while-switching-from-ruby-to-python"/>
    <updated>2014-12-17T13:50:24+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/12/17/common-mistakes-while-switching-from-ruby-to-python</id>
    <content type="html"><![CDATA[<p>This is more of a note to self sort of post to talk about silly mistakes which can take you down quietly when you switch from ruby to python.</p>

<!-- More -->


<h2>Problem 1 : The method which does nothing</h2>

<figure class='code'><figcaption><span>person.rb (Ruby)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="nf">say_hello</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2"> says hello&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bob</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Bob&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">bob</span><span class="o">.</span><span class="n">say_hello</span> <span class="c1"># Bob says hello</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>person.py (Python)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>      <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">def</span> <span class="nf">say_hello</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>      <span class="k">print</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s"> says hello&quot;</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">bob</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">&#39;Bob&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">bob</span><span class="o">.</span><span class="n">say_hello</span> <span class="c"># Danger! Danger! Method won&#39;t be called</span>
</span><span class='line'>
</span><span class='line'><span class="c"># After breaking your head for a while. Correct it to</span>
</span><span class='line'><span class="n">bob</span><span class="o">.</span><span class="n">say_hello</span><span class="p">()</span> <span class="c"># Well remember the good old parenthesis to call function?</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Problem 2 : The method which returns wrong value</h2>

<figure class='code'><figcaption><span>calculator.rb (Ruby)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c1"># returns 5</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>calculator.py (Python)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'>
</span><span class='line'><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="c"># Danger! Danger! Returns nil </span>
</span><span class='line'>
</span><span class='line'><span class="c"># After breaking your head for a while. Correct it to</span>
</span><span class='line'><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Solution</h2>

<p>Test Driven Development</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using app objects in multi app functional tests]]></title>
    <link href="http://tech.endeepak.com/blog/2014/07/27/using-app-objects-in-multi-app-functional-tests"/>
    <updated>2014-07-27T18:40:04+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/07/27/using-app-objects-in-multi-app-functional-tests</id>
    <content type="html"><![CDATA[<p>It is better to create small modular apps instead of single monolithic application. In <a href="http://www.bahmni.org">Bahmni EMR</a> we have small apps for Patient Registration, Consultation, etc. An end to end <a href="https://github.com/Bhamni/emr-functional-tests/tree/master/spec">functional test</a> covering patient registration and consultation goes through multiple apps. We needed to abstract the concept of an app in test code to increase the readability and maintainability.</p>

<p>The app objects are natural extension of <a href="https://code.google.com/p/selenium/wiki/PageObjects">page objects</a> recommended for writing functional tests. An app encapsulates all pages and coarse level actions in the app.</p>

<!-- More -->


<p>An simple implementation of app class would be</p>

<figure class='code'><figcaption><span>registration/app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Registration</span><span class="o">::</span><span class="no">App</span>
</span><span class='line'>    <span class="c1"># Pages in this apps    </span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">patient_page</span>
</span><span class='line'>        <span class="no">Registration</span><span class="o">::</span><span class="no">PatientPage</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">visit_details_page</span>
</span><span class='line'>        <span class="no">Registration</span><span class="o">::</span><span class="no">VisitDetailsPage</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Coarse level action in this app</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">register_new_patient</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>        <span class="n">click_link</span> <span class="s2">&quot;Create New&quot;</span>
</span><span class='line'>        <span class="n">patient_page</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:patient</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">start_visit</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:visit_type</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test using this simple implementation would look like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">registration</span> <span class="o">=</span> <span class="no">Registration</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">registration</span><span class="o">.</span><span class="n">register_new_patient</span> <span class="ss">:patient</span> <span class="o">=&gt;</span> <span class="n">new_patient</span><span class="p">,</span> <span class="ss">:visit_type</span> <span class="o">=&gt;</span> <span class="s1">&#39;OPD&#39;</span>
</span><span class='line'><span class="n">registration</span><span class="o">.</span><span class="n">visit_page</span><span class="o">.</span><span class="n">should_be_current_page</span>
</span><span class='line'><span class="n">registration</span><span class="o">.</span><span class="n">visit_page</span><span class="o">.</span><span class="n">save_new_patient_visit</span><span class="p">(</span><span class="n">visit_info</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">clinical</span> <span class="o">=</span> <span class="no">Clinical</span><span class="o">::</span><span class="no">App</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">clinical</span><span class="o">.</span><span class="n">patient_search_page</span><span class="o">.</span><span class="n">should_have_active_patient</span><span class="p">(</span><span class="n">new_patient</span><span class="p">)</span>
</span><span class='line'><span class="n">clinical</span><span class="o">.</span><span class="n">patient_search_page</span><span class="o">.</span><span class="n">view_patient</span><span class="p">(</span><span class="n">new_patient</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://github.com/Bhamni/emr-functional-tests/tree/master/spec">test code</a> is structured as</p>

<pre>
apps
    registration
        app.rb
        patient_page.rb
        visit_details_page.rb
    clinical
        app.rb
        patient_search_page.rb
features
    new_patient_visit.rb
framework
    app.rb # Base class for other apps
    page.rb # Base class for other pages
</pre>


<h3>Nicer DSL</h3>

<p>We are using capybara and Rspec. The lambda syntax, meta programming constructs in ruby and convention based programming allowed us to implement a DSL shown below. The complete code can be found <a href="https://github.com/Bhamni/emr-functional-tests/tree/master/spec">here</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">feature</span> <span class="s2">&quot;new patient visit&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">background</span> <span class="p">{</span> <span class="n">login</span><span class="p">(</span><span class="s1">&#39;superuser&#39;</span><span class="p">,</span> <span class="s1">&#39;password&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">scenario</span> <span class="s2">&quot;registration and consultation&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">new_patient</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:given_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Ram&quot;</span><span class="p">,</span> <span class="ss">:family_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;Singh&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">go_to_app</span><span class="p">(</span><span class="ss">:registration</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>            <span class="n">register_new_patient</span><span class="p">(</span><span class="ss">:patient</span> <span class="o">=&gt;</span> <span class="n">new_patient</span><span class="p">,</span> <span class="ss">:visit_type</span> <span class="o">=&gt;</span> <span class="s1">&#39;OPD&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">visit_page</span><span class="o">.</span><span class="n">should_be_current_page</span>
</span><span class='line'>            <span class="n">visit_page</span><span class="o">.</span><span class="n">save_new_patient_visit</span><span class="p">(</span><span class="n">visit_info</span><span class="p">)</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">go_to_app</span><span class="p">(</span><span class="ss">:clinical</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>            <span class="n">patient_search_page</span><span class="o">.</span><span class="n">should_have_active_patient</span><span class="p">(</span><span class="n">new_patient</span><span class="p">)</span>
</span><span class='line'>            <span class="n">patient_search_page</span><span class="o">.</span><span class="n">view_patient</span><span class="p">(</span><span class="n">new_patient</span><span class="p">)</span>
</span><span class='line'>            <span class="c1"># ....</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I didn&rsquo;t into details of implementing the DSL. If people are interested, I can write a part 2 of this post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make sure functional tests are user centric]]></title>
    <link href="http://tech.endeepak.com/blog/2014/07/27/make-sure-functional-tests-are-user-centric"/>
    <updated>2014-07-27T16:43:49+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/07/27/make-sure-functional-tests-are-user-centric</id>
    <content type="html"><![CDATA[<p>In modern day web applications, most of the data is fetched and saved using ajax calls and the mark up is generated on client side by compiling static HTML templates. The functional tests need to make sure assertions wait till completion of ajax call.</p>

<p>Couple of bad ways to achieve this is by using <code>sleep(xSeconds)</code> or <code>wait_for_ajax</code> like this</p>

<!-- More -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fiil_in</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;foo&#39;</span> <span class="c1"># you might be using a page object pattern in real code</span>
</span><span class='line'><span class="n">click_on</span> <span class="s1">&#39;Save&#39;</span>
</span><span class='line'><span class="n">wait_for_ajax</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;#number_of_people&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The implementation of wait_for_ajax which depends on jQuery.active</span>
</span><span class='line'><span class="k">def</span> <span class="nf">wait_for_ajax</span>
</span><span class='line'>  <span class="n">wait_until</span> <span class="p">{</span> <span class="n">page</span><span class="o">.</span><span class="n">evaluate_script</span><span class="p">(</span><span class="s1">&#39;jQuery.active&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>sleep(xSeconds)</code> makes your tests indeterministic and <code>wait_for_ajax</code> makes it dependent on javascript framework used in application.</p>

<h2>Solution 1 : Choose a good framework</h2>

<p>Frameworks like capybara have implicit wait mechanism which eliminates the need for <code>wait_for_ajax</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">click_on</span> <span class="s1">&#39;Save&#39;</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;#number_of_people&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1"># Implicit wait</span>
</span></code></pre></td></tr></table></div></figure>


<p>But what happens when</p>

<ul>
<li>You are not using framework like capybara <em>or</em></li>
<li>The assertion is done on data saved in a database or file system</li>
</ul>


<p> In these cases, don&rsquo;t go back to <code>wait_for_ajax</code> or <code>sleep</code> solutions. Instead of depending on technical details of the app, you need to think in terms of</p>

<blockquote><p>How does the user know app is done loading or saving data?</p></blockquote>

<p>This will give you a hint on any missing usability requirements in the app.</p>

<h2>Solution 2 : Think like a user</h2>

<p>When you think like user, you will realize there must be a visual clue in the app to indicate the progress. The functional tests should also depend on this indicator (like a spinner, overlay etc) to figure out when to assert on data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># click</span>
</span><span class='line'><span class="n">wait_for_completion</span>
</span><span class='line'><span class="c1"># assert</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Example implementation of wait_for_completion</span>
</span><span class='line'><span class="k">def</span> <span class="nf">wait_for_completion</span>
</span><span class='line'>  <span class="n">wait_until</span> <span class="p">{</span> <span class="n">page</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;#loading-indicator&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">visible?</span> <span class="o">==</span> <span class="kp">false</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When your tests user centric, they provide valuable feedback on the user experience.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep your models independent of angular]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/18/keep-your-models-independent-of-angular"/>
    <updated>2014-05-18T16:38:01+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/18/keep-your-models-independent-of-angular</id>
    <content type="html"><![CDATA[<blockquote><p>If you are using MVC framework you need to make sure controllers are very thin and domain logic lies in small, framework independent, composable models - Wise People</p></blockquote>

<p>In AngularJS, you need to make sure lot of data is not defined directly on $scope and domain logic is not dependent on angular&rsquo;s digest cycle. If follow this mantra, unit testing the models would be a lot simpler which in turn is a indicates that your code in is good shape.</p>

<!-- More -->


<p>Alright lets get to some code. Let&rsquo;s consider a simple example where we have a form to capture person&rsquo;s information such as firstName, lastName, age or dateOfBirth. The age or dateOfBirth should be auto populated based on its counter part.</p>

<figure class='code'><figcaption><span>Bad code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//In controller</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">dateOfBirth</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="nx">setDateOfBirthBasedOnAge</span><span class="p">);</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;dateOfBirth&#39;</span><span class="p">,</span> <span class="nx">setAgeBasedOnDateOfBirth</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to test the logic to compute fullName or age<->dateOfBirth logic, you will have to use angular-mock and inject $scope in your tests. This leads to lot of unnecessary boilerplate code. Lets look at how to refactor this code.</p>

<h4>Refactor 1 : Introduce a model</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Model</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">dateOfBirth</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//In controller</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;person.age&#39;</span><span class="p">,</span> <span class="nx">setDateOfBirthBasedOnAge</span><span class="p">);</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;person.dateOfBirth&#39;</span><span class="p">,</span> <span class="nx">setAgeBasedOnDateOfBirth</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can simply instante a person object and test the fullName method.</p>

<h4>Refactor 2 : Remove dependency on $scope.$watch</h4>

<p>In this step we will use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty</a>, ES5 API which works on <a href="http://kangax.github.io/compat-table/es5/#Object.defineProperty">most of the browsers</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Model</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">..</span>       <span class="c1">//lastName, firstName, fullName code remains same as above</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">_age</span><span class="p">,</span> <span class="nx">_dateOfBirth</span><span class="p">;</span> <span class="c1">// Private fields</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">_age</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="nx">set</span><span class="o">:</span> <span class="nx">fubction</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">_age</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">setDateOfBirthBasedOnAge</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;dateOfBirth&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">_dateOfBirth</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="nx">set</span><span class="o">:</span> <span class="nx">fubction</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">_dateOfBirth</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">setAgeBasedOnDateOfBirth</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//In controller</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>After this step, your domain logic can be tested without having to use angular-mock or injectors etc.</p>

<h3>Conclusion</h3>

<p>One of the boasted feature in AngualrJS is using POJOs for data binding, compared to using special observables or models  in knockout, ember etc. If this is one of the reason you are using AngularJS, it is very important to make sure your domain logic doesn&rsquo;t leak into controllers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript functions in JSON configuration]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/18/javascript-functions-in-json-configuration"/>
    <updated>2014-05-18T15:20:32+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/18/javascript-functions-in-json-configuration</id>
    <content type="html"><![CDATA[<p>There is no native support for defining functions in JSON. Commonly used approach is to define function as string and use <code>eval()</code> or <code>new Function()</code> to contruct the function. The basic difference between these two are</p>

<ul>
<li><code>eval()</code> works within the current execution scope. It can access or modify local variables.</li>
<li><code>new Function()</code> runs in a separate scope. It cannot access or modify local variables.</li>
</ul>


<p>These samples show how the json would differ in these two cases</p>

<!-- More -->




<figure class='code'><figcaption><span>Using eval()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// JSON config</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">section</span><span class="o">:</span> <span class="s2">&quot;Additional Details&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">showIf</span><span class="o">:</span> <span class="s2">&quot;function(context) { return context.person.age &gt; 60; }&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//This can parsed in javascript as</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">showIf</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;(&#39;</span> <span class="o">+</span> <span class="nx">config</span><span class="p">.</span><span class="nx">showIf</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shouldShowThisSection</span> <span class="o">=</span> <span class="nx">showIf</span><span class="p">({</span><span class="nx">person</span><span class="o">:</span> <span class="nx">personData</span><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Using new Function()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// JSON config</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">section</span><span class="o">:</span> <span class="s2">&quot;Additional Details&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">showIf</span><span class="o">:</span> <span class="s2">&quot;return context.person.age &gt; 60&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//This can parsed in javascript as</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">showIf</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;context&#39;</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">showIf</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shouldShowThisSection</span> <span class="o">=</span> <span class="nx">showIf</span><span class="p">({</span><span class="nx">person</span><span class="o">:</span> <span class="nx">personData</span><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use either based on the use case in your application. In <a href="http://bahmni.org">bahmni</a>, we went with <code>new Function()</code> for couple of reasons</p>

<ul>
<li>We did not want config code to modify variables in application execution scope by mistake.</li>
<li>We wanted to control the function signature such as number of parameters and its name to keep it simple and less error prone.</li>
</ul>


<p>If you prefer using <code>eval</code> syntax, try <a href="https://github.com/vkiryukhin/jsonfn">vkiryukhin/jsonfn</a>.</p>

<h4>Multi line functions</h4>

<p>The above examples work fine for sinle line expressions. If you need multiple line functions, you need to tweak it a bit. Firstly, JSON does not support multiline string. The work around is to define an array of strings as shown below.</p>

<figure class='code'><figcaption><span>Multi line functions parsed using new Function()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// JSON config</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">section</span><span class="o">:</span> <span class="s2">&quot;Additional Details&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">showIf</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;if(context.person.gender === &#39;M&#39; &amp;&amp; context.person.age &gt; 60)&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;return true;&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;else if(context.person.gender === &#39;F&#39; &amp;&amp; context.person.age &gt; 55)&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;return true;&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;else&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;return false;&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//This can parsed in javascript as</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">showIf</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;context&#39;</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">showIf</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">))</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shouldShowThisSection</span> <span class="o">=</span> <span class="nx">showIf</span><span class="p">({</span><span class="nx">person</span><span class="o">:</span> <span class="nx">personData</span><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Performance</h4>

<p>There is not much difference in performance when you define a function using <code>function() {}</code> expression <code>eval(&lsquo;function() {}&rsquo;)</code> or <code>new Function()</code>. Have a look at this <a href="http://jsperf.com/function-vs-new-function-vs-eval-function">benchmark</a> using jsperf.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spinners in single page apps]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/11/spinners-in-single-page-apps"/>
    <updated>2014-05-11T16:55:23+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/11/spinners-in-single-page-apps</id>
    <content type="html"><![CDATA[<p>One of the good practices in single page apps, is to show spinners (overlay + loading icon) while retrieving data or saving asynchronously. Often people tend to add a generic interceptor to show spinner for all ajax calls. In any mid size app, you will realize that the assumption <strong>&ldquo;Show an overlay for all ajax call&rdquo;</strong> is incorrect. Few examples</p>

<ul>
<li>An <a href="http://jqueryui.com/autocomplete/">autocomplete</a> input box fetching reote data</li>
<li>An infininte scroll fetching more data as the use scrolls down the list.</li>
</ul>


<!-- More -->


<p>To solve this, one might add an option in interceptor to not show spinner for certain calls. This leads to complicated code due to initial wrong assumption. A better soultion is to have simple reusable code to show/hide spinner and use it explicitly for calls which need spinner.</p>

<p>If you are using a library which returns a promise for ajax call(or object like xhr returned by jQuery.ajax), the API and implementation would look like this.</p>

<figure class='code'><figcaption><span>Api should be simple as</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">spinner</span><span class="p">.</span><span class="nx">forPromise</span><span class="p">(</span><span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/items&#39;</span><span class="p">))</span> <span class="c1">//AngularJS</span>
</span><span class='line'>
</span><span class='line'><span class="nx">spinner</span><span class="p">.</span><span class="nx">forPromise</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;/items&#39;</span><span class="p">))</span> <span class="c1">//jQuery</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Simple Spinner Implementation in AngularJS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">myModule</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;spinner&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">forPromise</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">promise</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#overlay&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">promise</span><span class="p">[</span><span class="s1">&#39;finally&#39;</span><span class="p">](</span><span class="kd">function</span><span class="p">(){</span> <span class="c1">//use promise.always(hide) in jQuery</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#overlay&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">forPromise</span><span class="o">:</span> <span class="nx">forPromise</span> <span class="p">}</span>
</span><span class='line'> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have a multiple components of the page using same spinner, we need to enhance the the code to make sure spinner is hidden only after both components have completed async calls. This can be implemented by keeping spinner count as shown below.</p>

<figure class='code'><figcaption><span>Muliple Call Supported Spinner Implementation in AngularJS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">myModule</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;spinner&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">showCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">show</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">showCount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#overlay&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">hide</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">showCount</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">showCount</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#overlay&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">forPromise</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">promise</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">show</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">promise</span><span class="p">[</span><span class="s1">&#39;finally&#39;</span><span class="p">](</span><span class="nx">hide</span><span class="p">);</span> <span class="c1">//use promise.always(hide) in jQuery</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">forPromise</span><span class="o">:</span> <span class="nx">forPromise</span> <span class="p">};</span>
</span><span class='line'> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In <a href="http://www.bahmni.org">Bahmni</a>, we use a spinner with animation which can be found <a href="https://github.com/Bhamni/openmrs-module-bahmniapps/blob/master/ui/app/common/ui-helper/spinner.js">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Printing external html templates using AngularJS]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/printing-external-html-templates-using-angularjs"/>
    <updated>2014-05-03T20:50:48+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/printing-external-html-templates-using-angularjs</id>
    <content type="html"><![CDATA[<h2>Use case</h2>

<p>In <a href="http://bahmni.org">Bahmni</a> EMR we needed to support customizable html templates for printing patient regisatrtion card and other printable documents. We needed a print API which looks like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Contract</span>
</span><span class='line'><span class="nx">printer</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="nx">templateUrl</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//This would called on clicking the print button</span>
</span><span class='line'><span class="nx">printer</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="s1">&#39;/config/registrationCardTempate.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">patient</span><span class="o">:</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Ram Kumar&#39;</span><span class="p">,</span> <span class="nx">dateOfBirth</span><span class="o">:</span> <span class="s1">&#39;1978-08-23&#39;</span><span class="p">,</span> <span class="nx">gender</span><span class="o">:</span> <span class="s1">&#39;M&#39;</span><span class="p">}})</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>Sample html template</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/config/registrationCard.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/config/logo.jpg&quot;</span><span class="nt">&gt;&lt;img&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>The hospital name<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;&lt;td&gt;</span>Name<span class="nt">&lt;/td&gt;&lt;td</span> <span class="na">ng-bind=</span><span class="s">&quot;patient.name&quot;</span><span class="nt">&gt;&lt;/td&gt;&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;&lt;td&gt;</span>Age<span class="nt">&lt;/td&gt;&lt;td</span> <span class="na">ng-bind=</span><span class="s">&quot;patient.dateOfBirth | age&quot;</span><span class="nt">&gt;&lt;/td&gt;&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;&lt;td&gt;</span>Gender<span class="nt">&lt;/td&gt;&lt;td</span> <span class="na">ng-bind=</span><span class="s">&quot;patient.gender&quot;</span><span class="nt">&gt;&lt;/td&gt;&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Implementation</h2>

<p>As the app is built using angularjs, we decided to use angular as the templating engine for rendering these templates as well. This also helped to reuse filters and other templating features of angular. The implementation consists of following steps</p>

<ol>
<li>Fetch the html template</li>
<li>Compile the html template with given data using angular&rsquo;s $complile</li>
<li>Wait for angular to complete rendering the template (Explained <a href="http://tech.endeepak.com/blog/2014/05/03/waiting-for-angularjs-digest-cycle">here</a>)</li>
<li>Print the html(Explained <a href="http://tech.endeepak.com/blog/2014/05/03/printing-html-with-image-and-css">here</a>)</li>
</ol>


<p>The code for print function looks like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">print</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">templateUrl</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">templateUrl</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">template</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">printScope</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$new</span><span class="p">(),</span> <span class="nx">data</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nx">$compile</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&#39;</span> <span class="o">+</span> <span class="nx">template</span> <span class="o">+</span> <span class="s1">&#39;&lt;/div&gt;&#39;</span><span class="p">))(</span><span class="nx">printScope</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">waitForRenderAndPrint</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">printScope</span><span class="p">.</span><span class="nx">$$phase</span> <span class="o">||</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">pendingRequests</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$timeout</span><span class="p">(</span><span class="nx">waitForRenderAndPrint</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">printHtml</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'>                <span class="nx">printScope</span><span class="p">.</span><span class="nx">$destroy</span><span class="p">();</span> <span class="c1">// To avoid memory leaks from scope create by $rootScope.$new()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">waitForRenderAndPrint</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complete solution is available on <a href="https://github.com/Bhamni/openmrs-module-bahmniapps/blob/master/ui/app/common/ui-helper/printer.js">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Waiting for AngularJS digest cycle]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/waiting-for-angularjs-digest-cycle"/>
    <updated>2014-05-03T17:43:34+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/waiting-for-angularjs-digest-cycle</id>
    <content type="html"><![CDATA[<p>The million dollar question most of the AngularJS users(devs) end up asking is</p>

<ul>
<li>How to wait for angular digest cycle to be completed?  <em>or in simple terms</em></li>
<li>How to wait for browser to complete rendering the view with angular bindings?</li>
</ul>


<!-- more -->


<p>AngularJS does not raise any event to notify this. The suggested simple solution is to use $timeout to queue your work to be run after current digest cycle (also waits for DOM renedering to be completed by the browser).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$timeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">//the code which needs to run after dom rendering</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above solution works only for views which don&rsquo;t have ng-include or directives with template url. In this case you have to wait for all the templates to be loaded(async) and then run your code. This can be achived by waiting for <a href="https://docs.angularjs.org/api/ng/service/$http#pendingRequests">$http.pendingRequests</a> to be zero. The enhanced solution is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">waitForRenderAndDoSomething</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">$http</span><span class="p">.</span><span class="nx">pendingRequests</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$timeout</span><span class="p">(</span><span class="nx">waitForRenderAndDoSomething</span><span class="p">);</span> <span class="c1">// Wait for all templates to be loaded</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//the code which needs to run after dom rendering</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">$timeout</span><span class="p">(</span><span class="nx">waitForRenderAndDoSomething</span><span class="p">);</span> <span class="c1">// Waits for first digest cycle</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully AngularJS will come up with a easier solution in future releases.</p>

<h4>Note</h4>

<p>The <a href="https://docs.angularjs.org/api/ng/service/$http#pendingRequests">$http.pendingRequests</a> supposed to be used for debugging purpose only. If angular team decides to remove this, you can implement the same using http interceptors as suggested in this <a href="http://stackoverflow.com/a/20062899/69362">link</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Printing html with image and css]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/printing-html-with-image-and-css"/>
    <updated>2014-05-03T16:54:00+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/printing-html-with-image-and-css</id>
    <content type="html"><![CDATA[<p>There are plenty of examples for printing html of an element. Most of them look like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//The simple soultion but has few problems listed below.</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">printHtml</span><span class="p">(</span><span class="nx">html</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">mywindow</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">open</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">mywindow</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;html&gt;&lt;head&gt;&lt;title&gt;My App&lt;/title&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">mywindow</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;/head&gt;&lt;body&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">mywindow</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">mywindow</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">mywindow</span><span class="p">.</span><span class="nx">print</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">mywindow</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The issues with above solution:</p>

<!-- more -->


<ol>
<li>The new window pop up would be blocked by browsers. Users need to enable pop up.</li>
<li>If you have external css files, you will notice the styling not applied some times.</li>
<li>If you have images(like logo), the print will be missing these images intermittently.</li>
</ol>


<p>The first issue can be addressed by using an iframe instead of new window. The 2nd and 3rd issues are addressed by making sure print happens after page has loaded css files and images. The working solution we use in <a href="http://www.bahmni.org">Bahmni</a> for printing patient registration cards looks like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">printHtml</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">html</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">hiddenFrame</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;iframe style=&quot;display: none&quot;&gt;&lt;/iframe&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">hiddenFrame</span><span class="p">.</span><span class="nx">contentWindow</span><span class="p">.</span><span class="nx">printAndRemove</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">hiddenFrame</span><span class="p">.</span><span class="nx">contentWindow</span><span class="p">.</span><span class="nx">print</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="nx">hiddenFrame</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">htmlDocument</span> <span class="o">=</span> <span class="s2">&quot;&lt;!doctype html&gt;&quot;</span><span class="o">+</span>
</span><span class='line'>                <span class="s2">&quot;&lt;html&gt;&quot;</span><span class="o">+</span>
</span><span class='line'>                    <span class="s1">&#39;&lt;body onload=&quot;printAndRemove();&quot;&gt;&#39;</span> <span class="o">+</span> <span class="c1">// Print only after document is loaded</span>
</span><span class='line'>                        <span class="nx">html</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s1">&#39;&lt;/body&gt;&#39;</span><span class="o">+</span>
</span><span class='line'>                <span class="s2">&quot;&lt;/html&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">hiddenFrame</span><span class="p">.</span><span class="nx">contentWindow</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;text/html&quot;</span><span class="p">,</span> <span class="s2">&quot;replace&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">doc</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">htmlDocument</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">doc</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>For printing contents of an element you can use this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//element can be found by document.querySelectorAll(slector)[0]</span>
</span><span class='line'><span class="c1">//or using jQuery(selector)[0]</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">printElement</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">printHtml</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">)</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress config.yml changes not picked up?]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/octopress-config-dot-yml-changes-not-picked-up"/>
    <updated>2014-05-03T14:58:33+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/octopress-config-dot-yml-changes-not-picked-up</id>
    <content type="html"><![CDATA[<h4>Issue:</h4>

<p>The <code>_confg.yml</code> changes are not picked when you deploy to github pages using <code>rake generate deploy</code></p>

<!-- more -->


<h4>Cause</h4>

<p>I had <code>rake preview</code> running another tab, it was started with older version of the <code>_confg.yml</code>. This was also generating the html files into same <code>_deploy</code> folder. Hence when you run <code>rake generate deploy</code>, it was pushing html generated by <code>rake preview</code> task.</p>

<h4>Solution</h4>

<p>Before running <code>rake generate deploy</code>, make sure you are not running <code>rake preview</code> or <code>rake watch</code> in any window or tab.</p>
]]></content>
  </entry>
  
</feed>
