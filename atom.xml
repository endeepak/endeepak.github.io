<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[!geek]]></title>
  <link href="http://tech.endeepak.com/atom.xml" rel="self"/>
  <link href="http://tech.endeepak.com/"/>
  <updated>2014-07-27T18:26:01+05:30</updated>
  <id>http://tech.endeepak.com/</id>
  <author>
    <name><![CDATA[Deepak Narayana Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make sure functional tests are application technology agnostic]]></title>
    <link href="http://tech.endeepak.com/blog/2014/07/27/make-sure-functional-tests-are-application-technology-agnostic"/>
    <updated>2014-07-27T16:43:49+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/07/27/make-sure-functional-tests-are-application-technology-agnostic</id>
    <content type="html"><![CDATA[<p>In modern day web applications, most of the data is fetched and saved using ajax calls and the mark up is generated on client side by compiling static HTML templates. When writing functional tests, we need to make sure assertions wait till completion of ajax call and HTML is generated from templates.</p>

<p>Sometimes people end up with either using <code>sleep(xSeconds)</code> or <code>wait_for_ajax</code> like this</p>

<!-- More -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">fiil_in</span> <span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s1">&#39;foo&#39;</span> <span class="c1"># you might be using a page object pattern in real code</span>
</span><span class='line'><span class="n">click_on</span> <span class="s1">&#39;Save&#39;</span>
</span><span class='line'><span class="n">wait_for_ajax</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;#number_of_people&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The implementation of wait_for_ajax which depends on jQuery.active</span>
</span><span class='line'><span class="k">def</span> <span class="nf">wait_for_ajax</span>
</span><span class='line'>  <span class="n">wait_until</span> <span class="p">{</span> <span class="n">page</span><span class="o">.</span><span class="n">evaluate_script</span><span class="p">(</span><span class="s1">&#39;jQuery.active&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above solutions make your tests indeterministic or dependent on javascript framework used in application. Fortunately frameworks like capybara have implicit wait mechanism which eliminates the need for <code>wait_for_ajax</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">click_on</span> <span class="s1">&#39;Save&#39;</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;#number_of_people&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">have_content</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1"># Implicit wait</span>
</span></code></pre></td></tr></table></div></figure>


<p>But, you may not be able to use this when</p>

<ul>
<li>You are not using framework like capybara <em>or</em></li>
<li>The assertion is done on data saved in a database or file system</li>
</ul>


<p> In these cases, you should not go back to <code>wait_for_ajax</code> or <code>sleep</code> solutions. Instead of depending on technical details of the app, you need to think in terms of</p>

<blockquote><p>How does the user know app is done loading or saving data?</p></blockquote>

<p>This will give you a hint on any missing usability requirements in the app. You must have a visual clue in the app to indicate the progress. Your functional tests should also depend on this indicator (like a spinner, overlay etc) to figure out when to assert on data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># click</span>
</span><span class='line'><span class="n">wait_for_completion</span>
</span><span class='line'><span class="c1"># assert</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Example implementation of wait_for_completion</span>
</span><span class='line'><span class="k">def</span> <span class="nf">wait_for_completion</span>
</span><span class='line'>  <span class="n">wait_until</span> <span class="p">{</span> <span class="n">page</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;#loading-indicator&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">visible?</span> <span class="o">==</span> <span class="kp">false</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>These type of tests can provide early feedback on the user experience.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep your models independent of angular]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/18/keep-your-models-independent-of-angular"/>
    <updated>2014-05-18T16:38:01+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/18/keep-your-models-independent-of-angular</id>
    <content type="html"><![CDATA[<blockquote><p>If you are using MVC framework you need to make sure controllers are very thin and domain logic lies in small, framework independent, composable models &ndash; Wise People</p></blockquote>

<p>In AngularJS, you need to make sure lot of data is not defined directly on $scope and domain logic is not dependent on angular&rsquo;s digest cycle. If follow this mantra, unit testing the models would be a lot simpler which in turn is a indicates that your code in is good shape.</p>

<!-- More -->


<p>Alright lets get to some code. Let&rsquo;s consider a simple example where we have a form to capture person&rsquo;s information such as firstName, lastName, age or dateOfBirth. The age or dateOfBirth should be auto populated based on its counter part.</p>

<figure class='code'><figcaption><span>Bad code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//In controller</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">dateOfBirth</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="nx">setDateOfBirthBasedOnAge</span><span class="p">);</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;dateOfBirth&#39;</span><span class="p">,</span> <span class="nx">setAgeBasedOnDateOfBirth</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to test the logic to compute fullName or age&lt;&ndash;>dateOfBirth logic, you will have to use angular-mock and inject $scope in your tests. This leads to lot of unnecessary boilerplate code. Lets look at how to refactor this code.</p>

<h4>Refactor 1 : Introduce a model</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Model</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">fullName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">dateOfBirth</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//In controller</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;person.age&#39;</span><span class="p">,</span> <span class="nx">setDateOfBirthBasedOnAge</span><span class="p">);</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;person.dateOfBirth&#39;</span><span class="p">,</span> <span class="nx">setAgeBasedOnDateOfBirth</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can simply instante a person object and test the fullName method.</p>

<h4>Refactor 2 : Remove dependency on $scope.$watch</h4>

<p>In this step we will use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty</a>, ES5 API which works on <a href="http://kangax.github.io/compat-table/es5/#Object.defineProperty">most of the browsers</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Model</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">..</span>       <span class="c1">//lastName, firstName, fullName code remains same as above</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">_age</span><span class="p">,</span> <span class="nx">_dateOfBirth</span><span class="p">;</span> <span class="c1">// Private fields</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;age&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">_age</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="nx">set</span><span class="o">:</span> <span class="nx">fubction</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">_age</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">setDateOfBirthBasedOnAge</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s1">&#39;dateOfBirth&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">_dateOfBirth</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="nx">set</span><span class="o">:</span> <span class="nx">fubction</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">_dateOfBirth</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">setAgeBasedOnDateOfBirth</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//In controller</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>After this step, your domain logic can be tested without having to use angular-mock or injectors etc.</p>

<h3>Conclusion</h3>

<p>One of the boasted feature in AngualrJS is using POJOs for data binding, compared to using special observables or models  in knockout, ember etc. If this is one of the reason you are using AngularJS, it is very important to make sure your domain logic doesn&rsquo;t leak into controllers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript functions in JSON configuration]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/18/javascript-functions-in-json-configuration"/>
    <updated>2014-05-18T15:20:32+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/18/javascript-functions-in-json-configuration</id>
    <content type="html"><![CDATA[<p>There is no native support for defining functions in JSON. Commonly used approach is to define function as string and use <code>eval()</code> or <code>new Function()</code> to contruct the function. The basic difference between these two are</p>

<ul>
<li><code>eval()</code> works within the current execution scope. It can access or modify local variables.</li>
<li><code>new Function()</code> runs in a separate scope. It cannot access or modify local variables.</li>
</ul>


<p>These samples show how the json would differ in these two cases</p>

<!-- More -->




<figure class='code'><figcaption><span>Using eval()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// JSON config</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">section</span><span class="o">:</span> <span class="s2">&quot;Additional Details&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">showIf</span><span class="o">:</span> <span class="s2">&quot;function(context) { return context.person.age &gt; 60; }&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//This can parsed in javascript as</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">showIf</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;(&#39;</span> <span class="o">+</span> <span class="nx">config</span><span class="p">.</span><span class="nx">showIf</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shouldShowThisSection</span> <span class="o">=</span> <span class="nx">showIf</span><span class="p">({</span><span class="nx">person</span><span class="o">:</span> <span class="nx">personData</span><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Using new Function()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// JSON config</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">section</span><span class="o">:</span> <span class="s2">&quot;Additional Details&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">showIf</span><span class="o">:</span> <span class="s2">&quot;return context.person.age &gt; 60&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//This can parsed in javascript as</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">showIf</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;context&#39;</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">showIf</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shouldShowThisSection</span> <span class="o">=</span> <span class="nx">showIf</span><span class="p">({</span><span class="nx">person</span><span class="o">:</span> <span class="nx">personData</span><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use either based on the use case in your application. In <a href="http://bahmni.org">bahmni</a>, we went with <code>new Function()</code> for couple of reasons</p>

<ul>
<li>We did not want config code to modify variables in application execution scope by mistake.</li>
<li>We wanted to control the function signature such as number of parameters and its name to keep it simple and less error prone.</li>
</ul>


<p>If you prefer using <code>eval</code> syntax, try <a href="https://github.com/vkiryukhin/jsonfn">vkiryukhin/jsonfn</a>.</p>

<h4>Multi line functions</h4>

<p>The above examples work fine for sinle line expressions. If you need multiple line functions, you need to tweak it a bit. Firstly, JSON does not support multiline string. The work around is to define an array of strings as shown below.</p>

<figure class='code'><figcaption><span>Multi line functions parsed using new Function()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// JSON config</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">section</span><span class="o">:</span> <span class="s2">&quot;Additional Details&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">showIf</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;if(context.person.gender === &#39;M&#39; &amp;&amp; context.person.age &gt; 60)&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;return true;&quot;</span><span class="p">,</span>
</span><span class='line'>           <span class="s2">&quot;else if(context.person.gender === &#39;F&#39; &amp;&amp; context.person.age &gt; 55)&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;return true;&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;else&quot;</span><span class="p">,</span>
</span><span class='line'>              <span class="s2">&quot;return false;&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//This can parsed in javascript as</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">showIf</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;context&#39;</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">showIf</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">))</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shouldShowThisSection</span> <span class="o">=</span> <span class="nx">showIf</span><span class="p">({</span><span class="nx">person</span><span class="o">:</span> <span class="nx">personData</span><span class="p">}));</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Performance</h4>

<p>There is not much difference in performance when you define a function using <code>function() {}</code> expression <code>eval(&lsquo;function() {}&rsquo;)</code> or <code>new Function()</code>. Have a look at this <a href="http://jsperf.com/function-vs-new-function-vs-eval-function">benchmark</a> using jsperf.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spinners in single page apps]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/11/spinners-in-single-page-apps"/>
    <updated>2014-05-11T16:55:23+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/11/spinners-in-single-page-apps</id>
    <content type="html"><![CDATA[<p>One of the good practices in single page apps, is to show spinners (overlay + loading icon) while retrieving data or saving asynchronously. Often people tend to add a generic interceptor to show spinner for all ajax calls. In any mid size app, you will realize that the assumption <strong>&ldquo;Show an overlay for all ajax call&rdquo;</strong> is incorrect. Few examples</p>

<ul>
<li>An <a href="http://jqueryui.com/autocomplete/">autocomplete</a> input box fetching reote data</li>
<li>An infininte scroll fetching more data as the use scrolls down the list.</li>
</ul>


<!-- More -->


<p>To solve this, one might add an option in interceptor to not show spinner for certain calls. This leads to complicated code due to initial wrong assumption. A better soultion is to have simple reusable code to show/hide spinner and use it explicitly for calls which need spinner.</p>

<p>If you are using a library which returns a promise for ajax call(or object like xhr returned by jQuery.ajax), the API and implementation would look like this.</p>

<figure class='code'><figcaption><span>Api should be simple as</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">spinner</span><span class="p">.</span><span class="nx">forPromise</span><span class="p">(</span><span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/items&#39;</span><span class="p">))</span> <span class="c1">//AngularJS</span>
</span><span class='line'>
</span><span class='line'><span class="nx">spinner</span><span class="p">.</span><span class="nx">forPromise</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;/items&#39;</span><span class="p">))</span> <span class="c1">//jQuery</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Simple Spinner Implementation in AngularJS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">myModule</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;spinner&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">forPromise</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">promise</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#overlay&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">promise</span><span class="p">[</span><span class="s1">&#39;finally&#39;</span><span class="p">](</span><span class="kd">function</span><span class="p">(){</span> <span class="c1">//use promise.always(hide) in jQuery</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#overlay&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">forPromise</span><span class="o">:</span> <span class="nx">forPromise</span> <span class="p">}</span>
</span><span class='line'> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you have a multiple components of the page using same spinner, we need to enhance the the code to make sure spinner is hidden only after both components have completed async calls. This can be implemented by keeping spinner count as shown below.</p>

<figure class='code'><figcaption><span>Muliple Call Supported Spinner Implementation in AngularJS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">myModule</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;spinner&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">showCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">show</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">showCount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#overlay&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">hide</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">showCount</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">showCount</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#overlay&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">forPromise</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">promise</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">show</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">promise</span><span class="p">[</span><span class="s1">&#39;finally&#39;</span><span class="p">](</span><span class="nx">hide</span><span class="p">);</span> <span class="c1">//use promise.always(hide) in jQuery</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span> <span class="nx">forPromise</span><span class="o">:</span> <span class="nx">forPromise</span> <span class="p">};</span>
</span><span class='line'> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In <a href="http://www.bahmni.org">Bahmni</a>, we use a spinner with animation which can be found <a href="https://github.com/Bhamni/openmrs-module-bahmniapps/blob/master/ui/app/common/ui-helper/spinner.js">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Printing external html templates using AngularJS]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/printing-external-html-templates-using-angularjs"/>
    <updated>2014-05-03T20:50:48+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/printing-external-html-templates-using-angularjs</id>
    <content type="html"><![CDATA[<h2>Use case</h2>

<p>In <a href="http://bahmni.org">Bahmni</a> EMR we needed to support customizable html templates for printing patient regisatrtion card and other printable documents. We needed a print API which looks like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Contract</span>
</span><span class='line'><span class="nx">printer</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="nx">templateUrl</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//This would called on clicking the print button</span>
</span><span class='line'><span class="nx">printer</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="s1">&#39;/config/registrationCardTempate.html&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">patient</span><span class="o">:</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Ram Kumar&#39;</span><span class="p">,</span> <span class="nx">dateOfBirth</span><span class="o">:</span> <span class="s1">&#39;1978-08-23&#39;</span><span class="p">,</span> <span class="nx">gender</span><span class="o">:</span> <span class="s1">&#39;M&#39;</span><span class="p">}})</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>Sample html template</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;/config/registrationCard.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/config/logo.jpg&quot;</span><span class="nt">&gt;&lt;img&gt;</span>
</span><span class='line'><span class="nt">&lt;h1&gt;</span>The hospital name<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;table&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;&lt;td&gt;</span>Name<span class="nt">&lt;/td&gt;&lt;td</span> <span class="na">ng-bind=</span><span class="s">&quot;patient.name&quot;</span><span class="nt">&gt;&lt;/td&gt;&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;&lt;td&gt;</span>Age<span class="nt">&lt;/td&gt;&lt;td</span> <span class="na">ng-bind=</span><span class="s">&quot;patient.dateOfBirth | age&quot;</span><span class="nt">&gt;&lt;/td&gt;&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tr&gt;&lt;td&gt;</span>Gender<span class="nt">&lt;/td&gt;&lt;td</span> <span class="na">ng-bind=</span><span class="s">&quot;patient.gender&quot;</span><span class="nt">&gt;&lt;/td&gt;&lt;/tr&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Implementation</h2>

<p>As the app is built using angularjs, we decided to use angular as the templating engine for rendering these templates as well. This also helped to reuse filters and other templating features of angular. The implementation consists of following steps</p>

<ol>
<li>Fetch the html template</li>
<li>Compile the html template with given data using angular&rsquo;s $complile</li>
<li>Wait for angular to complete rendering the template (Explained <a href="http://tech.endeepak.com/blog/2014/05/03/waiting-for-angularjs-digest-cycle">here</a>)</li>
<li>Print the html(Explained <a href="http://tech.endeepak.com/blog/2014/05/03/printing-html-with-image-and-css">here</a>)</li>
</ol>


<p>The code for print function looks like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">print</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">templateUrl</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">templateUrl</span><span class="p">).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">template</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">printScope</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$new</span><span class="p">(),</span> <span class="nx">data</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nx">$compile</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&#39;</span> <span class="o">+</span> <span class="nx">template</span> <span class="o">+</span> <span class="s1">&#39;&lt;/div&gt;&#39;</span><span class="p">))(</span><span class="nx">printScope</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">waitForRenderAndPrint</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="nx">printScope</span><span class="p">.</span><span class="nx">$$phase</span> <span class="o">||</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">pendingRequests</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$timeout</span><span class="p">(</span><span class="nx">waitForRenderAndPrint</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">printHtml</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">html</span><span class="p">());</span>
</span><span class='line'>                <span class="nx">printScope</span><span class="p">.</span><span class="nx">$destroy</span><span class="p">();</span> <span class="c1">// To avoid memory leaks from scope create by $rootScope.$new()</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">waitForRenderAndPrint</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complete solution is available on <a href="https://github.com/Bhamni/openmrs-module-bahmniapps/blob/master/ui/app/common/ui-helper/printer.js">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Waiting for AngularJS digest cycle]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/waiting-for-angularjs-digest-cycle"/>
    <updated>2014-05-03T17:43:34+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/waiting-for-angularjs-digest-cycle</id>
    <content type="html"><![CDATA[<p>The million dollar question most of the AngularJS users(devs) end up asking is</p>

<ul>
<li>How to wait for angular digest cycle to be completed?  <em>or in simple terms</em></li>
<li>How to wait for browser to complete rendering the view with angular bindings?</li>
</ul>


<!-- more -->


<p>AngularJS does not raise any event to notify this. The suggested simple solution is to use $timeout to queue your work to be run after current digest cycle (also waits for DOM renedering to be completed by the browser).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$timeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">//the code which needs to run after dom rendering</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above solution works only for views which don&rsquo;t have ng-include or directives with template url. In this case you have to wait for all the templates to be loaded(async) and then run your code. This can be achived by waiting for <a href="https://docs.angularjs.org/api/ng/service/$http#pendingRequests">$http.pendingRequests</a> to be zero. The enhanced solution is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">waitForRenderAndDoSomething</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="nx">$http</span><span class="p">.</span><span class="nx">pendingRequests</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$timeout</span><span class="p">(</span><span class="nx">waitForRenderAndDoSomething</span><span class="p">);</span> <span class="c1">// Wait for all templates to be loaded</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">//the code which needs to run after dom rendering</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">$timeout</span><span class="p">(</span><span class="nx">waitForRenderAndDoSomething</span><span class="p">);</span> <span class="c1">// Waits for first digest cycle</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully AngularJS will come up with a easier solution in future releases.</p>

<h4>Note</h4>

<p>The <a href="https://docs.angularjs.org/api/ng/service/$http#pendingRequests">$http.pendingRequests</a> supposed to be used for debugging purpose only. If angular team decides to remove this, you can implement the same using http interceptors as suggested in this <a href="http://stackoverflow.com/a/20062899/69362">link</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Printing html with image and css]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/printing-html-with-image-and-css"/>
    <updated>2014-05-03T16:54:00+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/printing-html-with-image-and-css</id>
    <content type="html"><![CDATA[<p>There are plenty of examples for printing html of an element. Most of them look like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//The simple soultion but has few problems listed below.</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">printHtml</span><span class="p">(</span><span class="nx">html</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">mywindow</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">open</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">mywindow</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;html&gt;&lt;head&gt;&lt;title&gt;My App&lt;/title&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">mywindow</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;/head&gt;&lt;body&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">mywindow</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">html</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">mywindow</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">mywindow</span><span class="p">.</span><span class="nx">print</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">mywindow</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The issues with above solution:</p>

<!-- more -->


<ol>
<li>The new window pop up would be blocked by browsers. Users need to enable pop up.</li>
<li>If you have external css files, you will notice the styling not applied some times.</li>
<li>If you have images(like logo), the print will be missing these images intermittently.</li>
</ol>


<p>The first issue can be addressed by using an iframe instead of new window. The 2nd and 3rd issues are addressed by making sure print happens after page has loaded css files and images. The working solution we use in <a href="http://www.bahmni.org">Bahmni</a> for printing patient registration cards looks like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">printHtml</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">html</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">hiddenFrame</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;iframe style=&quot;display: none&quot;&gt;&lt;/iframe&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">hiddenFrame</span><span class="p">.</span><span class="nx">contentWindow</span><span class="p">.</span><span class="nx">printAndRemove</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">hiddenFrame</span><span class="p">.</span><span class="nx">contentWindow</span><span class="p">.</span><span class="nx">print</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="nx">hiddenFrame</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">htmlDocument</span> <span class="o">=</span> <span class="s2">&quot;&lt;!doctype html&gt;&quot;</span><span class="o">+</span>
</span><span class='line'>                <span class="s2">&quot;&lt;html&gt;&quot;</span><span class="o">+</span>
</span><span class='line'>                    <span class="s1">&#39;&lt;body onload=&quot;printAndRemove();&quot;&gt;&#39;</span> <span class="o">+</span> <span class="c1">// Print only after document is loaded</span>
</span><span class='line'>                        <span class="nx">html</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s1">&#39;&lt;/body&gt;&#39;</span><span class="o">+</span>
</span><span class='line'>                <span class="s2">&quot;&lt;/html&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">hiddenFrame</span><span class="p">.</span><span class="nx">contentWindow</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;text/html&quot;</span><span class="p">,</span> <span class="s2">&quot;replace&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">doc</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">htmlDocument</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">doc</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>For printing contents of an element you can use this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//element can be found by document.querySelectorAll(slector)[0]</span>
</span><span class='line'><span class="c1">//or using jQuery(selector)[0]</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">printElement</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">printHtml</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">)</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress config.yml changes not picked up?]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/octopress-config-dot-yml-changes-not-picked-up"/>
    <updated>2014-05-03T14:58:33+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/octopress-config-dot-yml-changes-not-picked-up</id>
    <content type="html"><![CDATA[<h4>Issue:</h4>

<p>The <code>_confg.yml</code> changes are not picked when you deploy to github pages using <code>rake generate deploy</code></p>

<!-- more -->


<h4>Cause</h4>

<p>I had <code>rake preview</code> running another tab, it was started with older version of the <code>_confg.yml</code>. This was also generating the html files into same <code>_deploy</code> folder. Hence when you run <code>rake generate deploy</code>, it was pushing html generated by <code>rake preview</code> task.</p>

<h4>Solution</h4>

<p>Before running <code>rake generate deploy</code>, make sure you are not running <code>rake preview</code> or <code>rake watch</code> in any window or tab.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging angular view bindings]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/debugging-angular-view-bindings"/>
    <updated>2014-05-03T09:34:54+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/debugging-angular-view-bindings</id>
    <content type="html"><![CDATA[<p>The way to debug problems with <code>{{}}</code> or <code>ng-bind</code> or any other directive is to use <a href="https://docs.angularjs.org/api/ng/function/angular.element">angular.element</a> method.</p>

<!-- more -->


<p>Example: If you want to debug missing data in <code>&lt;span>Name : {{person.fullName()}}&lt;/span></code></p>

<ul>
<li>Right click on the span and click Inspect element. Make sure span is selected in the elements tab</li>
<li>Go to console tab and type</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nx">$0</span><span class="p">).</span><span class="nx">scope</span><span class="p">().</span><span class="nx">pesron</span><span class="p">.</span><span class="nx">fullName</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>angular.element($0).scope()</code> you can inspect the data on scope. The angular.element can also get references to controller, injector using which you can inspect other objects.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Get controller</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nx">$0</span><span class="p">).</span><span class="nx">controller</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Getting injector and other objects</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">injector</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nx">$0</span><span class="p">).</span><span class="nx">injector</span><span class="p">()</span>
</span><span class='line'><span class="nx">injector</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;$rootScope&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">injector</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;myService&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The other alternative is to use chrome extension <a href="https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en">AngularJS Batarang</a>. This will add AngularJS tab in developer Tools. It lists all scopes in the current page. But finding the correct scope for a particualr element quite difficult. The &ldquo;Enable Inspector&rdquo; button in batarang doesn&rsquo;t work that well. So far the <a href="https://docs.angularjs.org/api/ng/function/angular.element">angular.element</a> is the best way to debug binding issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging angular ui-router]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/debugging-angular-ui-router"/>
    <updated>2014-05-03T08:21:40+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/debugging-angular-ui-router</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/angular-ui/ui-router">ui-router</a> from <a href="https://github.com/angular-ui">angular-ui</a> gives power of nested states and multiple named views which is essential for angular apps with non-trivial layout and workflow.</p>

<p>The main problem with angular ui-router is getting the route configurations right in the first time. You start seeing blank pages for misconfigured views. The sad part is these errors are not logged to console. It gets quite frustrating in tracking down the cause.</p>

<!-- more -->


<p>This where I found this <a href="http://stackoverflow.com/a/20786262/69362">stackoverflow link</a> which helps in solving this issue. If you find yourself in trouble with ui-router, just open the developer console on the browser and paste the below code.</p>

<script src="https://gist.github.com/endeepak/387102e7bc94f2ef505e.js"></script>


<h4>Some of the common mistakes made while moving fron angular&rsquo;s ng-route to ui-router are</h4>

<ul>
<li>Dependency on ui-router is not added</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Make sure &#39;ui.router&#39; module is added as dependency</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myApp</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ui.router&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The parent state doesn&rsquo;t have template with ui-view</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$stateProvider</span>
</span><span class='line'><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="c1">//parent state</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/user/:userId&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// Important that parent has a template with ui-view which the child states can replace</span>
</span><span class='line'>    <span class="nx">template</span><span class="o">:</span> <span class="s1">&#39;&lt;ui-view/&gt;&#39;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;user.projects&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="c1">//child state</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;projects&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;projects.html&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing f.js]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/01/introducing-f-dot-js"/>
    <updated>2014-05-01T18:59:39+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/01/introducing-f-dot-js</id>
    <content type="html"><![CDATA[<p>Javascript code is quite verbose when compared to other langauges. One of the features I missed coming from the ruby world is lambdas and the <code>&amp;:</code> sugar.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">books</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">book</span><span class="o">|</span> <span class="o">=&gt;</span> <span class="n">book</span><span class="o">.</span><span class="n">title</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># or even better</span>
</span><span class='line'><span class="n">books</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:title</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>compare this with javascript code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">books</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">book</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">book</span><span class="p">.</span><span class="nx">title</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>Good news is ES6 might come with proposed <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/arrow_functions">arrow functions</a>, but it might take a while before all the browsers implement this. This is where <a href="https://github.com/endeepak/f.js">f.js</a> can be handy. This library will help to write redable code by writing less. You can write the above code as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">books</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="p">(</span><span class="s1">&#39;book =&gt; book.title&#39;</span><span class="p">))</span>
</span><span class='line'><span class="c1">// or</span>
</span><span class='line'><span class="nx">books</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/endeepak/f.js">f.js</a> supports methods, negation and includes utilities like noop and identity. Examples</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">movies</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="s1">&#39;!watched&#39;</span><span class="p">))</span>
</span><span class='line'><span class="nx">people</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="s1">&#39;fullName()&#39;</span><span class="p">))</span>
</span><span class='line'><span class="nx">shows</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="p">(</span><span class="s1">&#39;!isGood()&#39;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Lambda with multiple parameters</span>
</span><span class='line'><span class="c1">//sort movies in descending order on rating</span>
</span><span class='line'><span class="nx">movies</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="p">(</span><span class="s1">&#39;(m1, m2) =&gt; m2.rating - m1.rating&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Noop and identity examples</span>
</span><span class='line'><span class="nx">books</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">callback</span> <span class="o">||</span> <span class="nx">f</span><span class="p">())</span> <span class="c1">//f() returns noop function</span>
</span><span class='line'><span class="nx">movies</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">filterFunction</span> <span class="o">||</span> <span class="nx">f</span><span class="p">(</span><span class="kc">true</span><span class="p">))</span> <span class="c1">//f(arg) returns identity function</span>
</span></code></pre></td></tr></table></div></figure>


<p>The f.y(lambda) method uses same syntax as arrow functions. Once ES6 arrow functions feature is available on all browsers, write a regex to remove usage of f.y and say bye to f.js</p>

<p>Code &amp; Documentation: <a href="https://github.com/endeepak/f.js">https://github.com/endeepak/f.js</a></p>
]]></content>
  </entry>
  
</feed>
