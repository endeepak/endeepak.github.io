<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: print | !geek]]></title>
  <link href="http://tech.endeepak.com/blog/categories/print/atom.xml" rel="self"/>
  <link href="http://tech.endeepak.com/"/>
  <updated>2019-02-14T07:34:56+05:30</updated>
  <id>http://tech.endeepak.com/</id>
  <author>
    <name><![CDATA[Deepak Narayana Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Printing external html templates using AngularJS]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/printing-external-html-templates-using-angularjs"/>
    <updated>2014-05-03T20:50:48+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/printing-external-html-templates-using-angularjs</id>
    <content type="html"><![CDATA[<h2>Use case</h2>

<p>In <a href="http://bahmni.org">Bahmni</a> EMR we needed to support customizable html templates for printing patient regisatrtion card and other printable documents. We needed a print API which looks like</p>

<pre><code class="js">//Contract
printer.print(templateUrl, data)

//This would called on clicking the print button
printer.print('/config/registrationCardTempate.html', {patient: {name: 'Ram Kumar', dateOfBirth: '1978-08-23', gender: 'M'}})
</code></pre>

<!-- more -->


<p>Sample html template</p>

<p>&#8220;`html
<link rel="stylesheet" href="http://tech.endeepak.com/config/registrationCard.css"/>
<img src="http://tech.endeepak.com/config/logo.jpg"><img></p>

<h1>The hospital name</h1>


<table>
    <tr><td>Name</td><td ng-bind="patient.name"></td></tr>
    <tr><td>Age</td><td ng-bind="patient.dateOfBirth | age"></td></tr>
    <tr><td>Gender</td><td ng-bind="patient.gender"></td></tr>
</table>


<pre><code>
## Implementation

As the app is built using angularjs, we decided to use angular as the templating engine for rendering these templates as well. This also helped to reuse filters and other templating features of angular. The implementation consists of following steps

1. Fetch the html template
2. Compile the html template with given data using angular's $complile
3. Wait for angular to complete rendering the template (Explained [here](http://tech.endeepak.com/blog/2014/05/03/waiting-for-angularjs-digest-cycle))
4. Print the html(Explained [here](http://tech.endeepak.com/blog/2014/05/03/printing-html-with-image-and-css))

The code for print function looks like this
</code></pre>

<p>var print = function (templateUrl, data) {
    $http.get(templateUrl).success(function(template){
        var printScope = angular.extend($rootScope.$new(), data);
        var element = $compile($(&lsquo;<div>&rsquo; + template + &lsquo;</div>&rsquo;))(printScope);
        var waitForRenderAndPrint = function() {
            if(printScope.$$phase || $http.pendingRequests.length) {
                $timeout(waitForRenderAndPrint);
            } else {
                printHtml(element.html());
                printScope.$destroy(); // To avoid memory leaks from scope create by $rootScope.$new()
            }
        }
        waitForRenderAndPrint();
    });
};
&#8220;`
The complete solution is available on <a href="https://github.com/Bhamni/openmrs-module-bahmniapps/blob/master/ui/app/common/ui-helper/printer.js">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Printing html with image and css]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/printing-html-with-image-and-css"/>
    <updated>2014-05-03T16:54:00+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/printing-html-with-image-and-css</id>
    <content type="html"><![CDATA[<p>There are plenty of examples for printing html of an element. Most of them look like this</p>

<pre><code class="js">//The simple soultion but has few problems listed below.
function printHtml(html) 
{
    var mywindow = window.open();
    mywindow.document.write('&lt;html&gt;&lt;head&gt;&lt;title&gt;My App&lt;/title&gt;');
    mywindow.document.write('&lt;/head&gt;&lt;body&gt;');
    mywindow.document.write(html);
    mywindow.document.write('&lt;/body&gt;&lt;/html&gt;');
    mywindow.print();
    mywindow.close();
    return true;
}
</code></pre>

<p>The issues with above solution:</p>

<!-- more -->


<ol>
<li>The new window pop up would be blocked by browsers. Users need to enable pop up.</li>
<li>If you have external css files, you will notice the styling not applied some times.</li>
<li>If you have images(like logo), the print will be missing these images intermittently.</li>
</ol>


<p>The first issue can be addressed by using an iframe instead of new window. The 2nd and 3rd issues are addressed by making sure print happens after page has loaded css files and images. The working solution we use in <a href="http://www.bahmni.org">Bahmni</a> for printing patient registration cards looks like this</p>

<pre><code class="js">var printHtml = function (html) {
    var hiddenFrame = $('&lt;iframe style="display: none"&gt;&lt;/iframe&gt;').appendTo('body')[0];
    hiddenFrame.contentWindow.printAndRemove = function() {
        hiddenFrame.contentWindow.print();
        $(hiddenFrame).remove();
    };
    var htmlDocument = "&lt;!doctype html&gt;"+
                "&lt;html&gt;"+
                    '&lt;body onload="printAndRemove();"&gt;' + // Print only after document is loaded
                        html +
                    '&lt;/body&gt;'+
                "&lt;/html&gt;";
    var doc = hiddenFrame.contentWindow.document.open("text/html", "replace");
    doc.write(htmlDocument);
    doc.close();
};
</code></pre>

<p>For printing contents of an element you can use this</p>

<pre><code class="js">//element can be found by document.querySelectorAll(slector)[0]
//or using jQuery(selector)[0]
var printElement = function (element) {
    printHtml(element.innerHTML)
};
</code></pre>
]]></content>
  </entry>
  
</feed>
