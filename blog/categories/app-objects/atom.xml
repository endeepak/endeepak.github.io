<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: app-objects | !geek]]></title>
  <link href="http://tech.endeepak.com/blog/categories/app-objects/atom.xml" rel="self"/>
  <link href="http://tech.endeepak.com/"/>
  <updated>2017-10-28T13:25:38+05:30</updated>
  <id>http://tech.endeepak.com/</id>
  <author>
    <name><![CDATA[Deepak Narayana Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using app objects in multi app functional tests]]></title>
    <link href="http://tech.endeepak.com/blog/2014/07/27/using-app-objects-in-multi-app-functional-tests"/>
    <updated>2014-07-27T18:40:04+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/07/27/using-app-objects-in-multi-app-functional-tests</id>
    <content type="html"><![CDATA[<p>It is better to create small modular apps instead of single monolithic application. In <a href="http://www.bahmni.org">Bahmni EMR</a> we have small apps for Patient Registration, Consultation, etc. An end to end <a href="https://github.com/Bhamni/emr-functional-tests/tree/master/spec">functional test</a> covering patient registration and consultation goes through multiple apps. We needed to abstract the concept of an app in test code to increase the readability and maintainability.</p>

<p>The app objects are natural extension of <a href="https://code.google.com/p/selenium/wiki/PageObjects">page objects</a> recommended for writing functional tests. An app encapsulates all pages and coarse level actions in the app.</p>

<!-- More -->


<p>An simple implementation of app class would be</p>

<pre><code class="ruby registration/app.rb">class Registration::App
    # Pages in this apps    
    def patient_page
        Registration::PatientPage.new
    end

    def visit_details_page
        Registration::VisitDetailsPage.new
    end

    # Coarse level action in this app
    def register_new_patient(options)
        click_link "Create New"
        patient_page.fill(options[:patient]).start_visit(options[:visit_type])
    end
end
</code></pre>

<p>The test using this simple implementation would look like</p>

<pre><code class="ruby">registration = Registration::App.new
registration.register_new_patient :patient =&gt; new_patient, :visit_type =&gt; 'OPD'
registration.visit_page.should_be_current_page
registration.visit_page.save_new_patient_visit(visit_info)

clinical = Clinical::App.new
clinical.patient_search_page.should_have_active_patient(new_patient)
clinical.patient_search_page.view_patient(new_patient)
</code></pre>

<p>The <a href="https://github.com/Bhamni/emr-functional-tests/tree/master/spec">test code</a> is structured as</p>

<pre>
apps
    registration
        app.rb
        patient_page.rb
        visit_details_page.rb
    clinical
        app.rb
        patient_search_page.rb
features
    new_patient_visit.rb
framework
    app.rb # Base class for other apps
    page.rb # Base class for other pages
</pre>


<h3>Nicer DSL</h3>

<p>We are using capybara and Rspec. The lambda syntax, meta programming constructs in ruby and convention based programming allowed us to implement a DSL shown below. The complete code can be found <a href="https://github.com/Bhamni/emr-functional-tests/tree/master/spec">here</a></p>

<pre><code class="ruby">feature "new patient visit" do
    background { login('superuser', 'password') }

    scenario "registration and consultation" do
        new_patient = {:given_name =&gt; "Ram", :family_name =&gt; 'Singh'}

        go_to_app(:registration) do
            register_new_patient(:patient =&gt; new_patient, :visit_type =&gt; 'OPD')
            visit_page.should_be_current_page
            visit_page.save_new_patient_visit(visit_info)
        end

        go_to_app(:clinical) do
            patient_search_page.should_have_active_patient(new_patient)
            patient_search_page.view_patient(new_patient)
            # ....
        end
    end
end
</code></pre>

<p>I didn&rsquo;t into details of implementing the DSL. If people are interested, I can write a part 2 of this post.</p>
]]></content>
  </entry>
  
</feed>
