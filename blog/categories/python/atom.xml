<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | !geek]]></title>
  <link href="https://tech.endeepak.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="https://tech.endeepak.com/"/>
  <updated>2021-10-07T06:53:08+05:30</updated>
  <id>https://tech.endeepak.com/</id>
  <author>
    <name><![CDATA[Deepak Narayana Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python's elegance in dynamic methods compared to ruby]]></title>
    <link href="https://tech.endeepak.com/blog/2014/12/27/ruby-method-missing-vs-python-getattr"/>
    <updated>2014-12-27T16:48:17+05:30</updated>
    <id>https://tech.endeepak.com/blog/2014/12/27/ruby-method-missing-vs-python-getattr</id>
    <content type="html"><![CDATA[<p>I have been a ruby fanboy for a long time because of its expressiveness and elegance in defining DSLs. One of the scary thing in ruby is, when you implement <code>method_missing</code> you need to make sure to implement <code>respond_to_missing?</code>, otherwise <a href="http://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding">bad things will happen to you</a>. The below ruby example shows minimal parts recommended for providing dynamic methods</p>

<!-- More -->


<pre><code class="rb">class Foo
    def method_missing(method_name, *args, &amp;block)
        if method_name.to_s.start_with?('bar_')
            #do_some_thing...
    end

    # You should define this for your good
    # Read http://robots.thoughtbot.com/always-define-respond-to-missing-when-overriding for more details
    def respond_to_missing?(method_name)
        method_name.to_s.start_with?('bar_') || super
    end
end

# So that following will work consistently
foo = Foo.new
foo.bar_qux
foo.bar_qux() 
foo.respond_to?(:bar_qux)
foo.method(:bar_qux)
</code></pre>

<p>The same can be achieved in python using <code>__getattr__</code> with lesser code.</p>

<pre><code class="py">class Foo(object):
    def __getattr__(self, attr):
        if attr.startswith('bar_'):
            #return method or an attribute..

# Following will work consistently
foo = Foo()
foo.bar_qux
foo.bar_qux() 
hasattr(foo, 'bar_qux')
</code></pre>

<p>Eventhough it isn&rsquo;t a lot of code in ruby, people can forget to implement both methods or implement them differently by mistake leading to tricky bugs and higher maintenance cost.</p>

<h3>Can ruby have a similar implementation?</h3>

<p>May be not. It is because of the fact that ruby functions are not first class objects which can be returned in a single method_missing hook. Also ruby&rsquo;s syntax of calling a method without parenthesis(i.e. <code>foo.bar_qux</code> is same as <code>foo.bar_qux()</code>) makes it hard to treat functions as callable objects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common mistakes while switching from ruby to python]]></title>
    <link href="https://tech.endeepak.com/blog/2014/12/17/common-mistakes-while-switching-from-ruby-to-python"/>
    <updated>2014-12-17T13:50:24+05:30</updated>
    <id>https://tech.endeepak.com/blog/2014/12/17/common-mistakes-while-switching-from-ruby-to-python</id>
    <content type="html"><![CDATA[<p>This is more of a note to self sort of post to talk about silly mistakes which can take you down quietly when you switch from ruby to python.</p>

<!-- More -->


<h2>Problem 1 : The method which does nothing</h2>

<pre><code class="rb person.rb (Ruby)">class Person
    def initialize(name)
        @name = name
    end

    def say_hello
        puts "#{@name} says hello"
    end
end

bob = Person.new('Bob')
bob.say_hello # Bob says hello
</code></pre>

<pre><code class="py person.py (Python)">class Person(object):
    def __init__(self, name):
        self.name = name

    def say_hello(self):
        print("%s says hello" % self.name)


bob = Person('Bob')
bob.say_hello # Danger! Danger! Method won't be called

# After breaking your head for a while. Correct it to
bob.say_hello() # Well remember the good old parenthesis to call function?
</code></pre>

<h2>Problem 2 : The method which returns wrong value</h2>

<pre><code class="rb calculator.rb (Ruby)">def add(x, y)
    x + y
end

add(2, 3) # returns 5
</code></pre>

<pre><code class="py calculator.py (Python)">def add(x, y):
    x + y

add(2, 3) # Danger! Danger! Returns nil 

# After breaking your head for a while. Correct it to
def add(x, y):
    return x + y
</code></pre>

<h2>Solution</h2>

<p>Test Driven Development</p>
]]></content>
  </entry>
  
</feed>
