<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ajax | !geek]]></title>
  <link href="http://tech.endeepak.com/blog/categories/ajax/atom.xml" rel="self"/>
  <link href="http://tech.endeepak.com/"/>
  <updated>2014-07-27T18:26:01+05:30</updated>
  <id>http://tech.endeepak.com/</id>
  <author>
    <name><![CDATA[Deepak Narayana Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make sure functional tests are application technology agnostic]]></title>
    <link href="http://tech.endeepak.com/blog/2014/07/27/make-sure-functional-tests-are-application-technology-agnostic"/>
    <updated>2014-07-27T16:43:49+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/07/27/make-sure-functional-tests-are-application-technology-agnostic</id>
    <content type="html"><![CDATA[<p>In modern day web applications, most of the data is fetched and saved using ajax calls and the mark up is generated on client side by compiling static HTML templates. When writing functional tests, we need to make sure assertions wait till completion of ajax call and HTML is generated from templates.</p>

<p>Sometimes people end up with either using <code>sleep(xSeconds)</code> or <code>wait_for_ajax</code> like this</p>

<!-- More -->


<p>``` ruby
fiil_in &lsquo;name&rsquo;, :with => &lsquo;foo&rsquo; # you might be using a page object pattern in real code
click_on &lsquo;Save&rsquo;
wait_for_ajax
expect(find(&lsquo;#number_of_people&rsquo;).text).to be(10)</p>

<h1>The implementation of wait_for_ajax which depends on jQuery.active</h1>

<p>def wait_for_ajax</p>

<pre><code>wait_until { page.evaluate_script('jQuery.active') == 0 }
</code></pre>

<p>end
```</p>

<p>The above solutions make your tests indeterministic or dependent on javascript framework used in application. Fortunately frameworks like capybara have implicit wait mechanism which eliminates the need for <code>wait_for_ajax</code></p>

<p><code>ruby
click_on 'Save'
expect(find('#number_of_people').to have_content(10) # Implicit wait
</code></p>

<p>But, you may not be able to use this when</p>

<ul>
<li>You are not using framework like capybara <em>or</em></li>
<li>The assertion is done on data saved in a database or file system</li>
</ul>


<p> In these cases, you should not go back to <code>wait_for_ajax</code> or <code>sleep</code> solutions. Instead of depending on technical details of the app, you need to think in terms of</p>

<blockquote><p>How does the user know app is done loading or saving data?</p></blockquote>

<p>This will give you a hint on any missing usability requirements in the app. You must have a visual clue in the app to indicate the progress. Your functional tests should also depend on this indicator (like a spinner, overlay etc) to figure out when to assert on data.</p>

<p>``` ruby</p>

<h1>click</h1>

<p>wait_for_completion</p>

<h1>assert</h1>

<h1>Example implementation of wait_for_completion</h1>

<p>def wait_for_completion</p>

<pre><code>wait_until { page.find('#loading-indicator').visible? == false }
</code></pre>

<p>end
```
These type of tests can provide early feedback on the user experience.</p>
]]></content>
  </entry>
  
</feed>
