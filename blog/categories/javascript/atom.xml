<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | !geek]]></title>
  <link href="http://tech.endeepak.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://tech.endeepak.com/"/>
  <updated>2014-05-03T13:40:24+05:30</updated>
  <id>http://tech.endeepak.com/</id>
  <author>
    <name><![CDATA[Deepak Narayana Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debugging Angular View Bindings]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/debugging-angular-view-bindings"/>
    <updated>2014-05-03T09:34:54+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/debugging-angular-view-bindings</id>
    <content type="html"><![CDATA[<p>The way to debug problems with <code></code> or <code>ng-bind</code> or any other directive is to use <a href="https://docs.angularjs.org/api/ng/function/angular.element">angular.element</a> method.</p>

<p>Example: If you want to debug missing data in <code>&lt;span>Name : &lt;/span></code></p>

<ul>
<li>Right click on the span and click Inspect element. Make sure span is selected in the elements tab</li>
<li>Go to console tab and type</li>
</ul>


<p><code>js
angular.element($0).scope().pesron.fullName()
</code></p>

<p>Using <code>angular.element($0).scope()</code> you can inspect the data on scope. The angular.element can also get references to controller, injector using which you can inspect other objects.</p>

<p>```js
//Get controller
angular.element($0).controller()</p>

<p>//Getting injector and other objects
var injector = angular.element($0).injector()
injector.get(&lsquo;$rootScope&rsquo;)
injector.get(&lsquo;myService&rsquo;)
```</p>

<p>The other alternative is to use chrome extension <a href="https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en">AngularJS Batarang</a>. This will add AngularJS tab in developer Tools. It lists all scopes in the current page. But finding the correct scope for a particualr element quite difficult. The &ldquo;Enable Inspector&rdquo; button in batarang doesn&rsquo;t work that well. So far the <a href="https://docs.angularjs.org/api/ng/function/angular.element">angular.element</a> is the best way to debug binding issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Angular Ui-router]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/debugging-angular-ui-router"/>
    <updated>2014-05-03T08:21:40+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/debugging-angular-ui-router</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/angular-ui/ui-router">ui-router</a> from <a href="https://github.com/angular-ui">angular-ui</a> gives power of nested states and multiple named views which is essential for angular apps with non-trivial layout and workflow.</p>

<p>The main problem with angular ui-router is getting the route configurations right in the first time. You start seeing blank pages for misconfigured views. The sad part is these errors are not logged to console. It gets quite frustrating in tracking down the cause.</p>

<p>This where I found this <a href="http://stackoverflow.com/a/20786262/69362">stackoverflow link</a> which helps in solving this issue. If you find yourself in trouble with ui-router, just open the developer console on the browser and paste the beloew code.</p>

<script src="https://gist.github.com/endeepak/387102e7bc94f2ef505e.js"></script>


<h4>Some of the common mistakes made while moving fron angular&rsquo;s ng-route to ui-router are</h4>

<ul>
<li>Dependency on ui-router is not added</li>
</ul>


<p><code>js
//Make sure 'ui.router' module is added as dependency
var myApp = angular.module('myApp', ['ui.router']);
</code></p>

<ul>
<li>The parent state doesn&rsquo;t have template with ui-view</li>
</ul>


<p>```js
$stateProvider
.state(&lsquo;user&rsquo;, { //parent state</p>

<pre><code>url: '/user/:userId',
// Important that parent has a template with ui-view which the child states can replace
template: '&lt;ui-view/&gt;' 
</code></pre>

<p>})
.state(&lsquo;user.projects&rsquo;, { //child state</p>

<pre><code>url: 'projects',
templateUrl: 'projects.html',
</code></pre>

<p>})
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing f.js]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/01/introducing-f-dot-js"/>
    <updated>2014-05-01T18:59:39+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/01/introducing-f-dot-js</id>
    <content type="html"><![CDATA[<p>Javascript code is quite verbose when compared to other langauges. One of the features I missed coming from the ruby world is lambdas and the <code>&amp;:</code> sugar.</p>

<p>```ruby
books.map { |book| => book.title }</p>

<h1>or even better</h1>

<p>books.map(&amp;:title)
```
compare this with javascript code</p>

<p><code>js
books.map(function(book) { return book.title })
</code></p>

<p>Good news is ES6 might come with proposed <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/arrow_functions">arrow functions</a>, but it might take a while before all the browsers implement this. This is where <a href="https://github.com/endeepak/f.js">f.js</a> can be handy. This library will help to write redable code by writing less. You can write the above code as</p>

<p><code>js
books.map(f.y('book =&gt; book.title'))
// or
books.map(f.x('title'))
</code></p>

<p><a href="https://github.com/endeepak/f.js">f.js</a> supports methods, negation and includes utilities like noop and identity. Examples</p>

<p>```js
movies.filter(f.x(&lsquo;!watched&rsquo;))
people.map(f.x(&lsquo;fullName()&rsquo;))
shows.filter(f.x(&lsquo;!isGood()&rsquo;))</p>

<p>//Lambda with multiple parameters
//sort movies in descending order on rating
movies.sort(f.y(&lsquo;(m1, m2) => m2.rating &ndash; m1.rating&rsquo;));</p>

<p>//Noop and identity examples
books.forEach(callback || f()) //f() returns noop function
movies.filter(filterFunction || f(true)) //f(arg) returns identity function
```</p>

<p>The f.y(lambda) method uses same syntax as arrow functions. Once ES6 arrow functions feature is available on all browsers, write a regex to remove usage of f.y and say bye to f.js</p>

<p>Code &amp; Documentation: <a href="https://github.com/endeepak/f.js">https://github.com/endeepak/f.js</a></p>
]]></content>
  </entry>
  
</feed>
