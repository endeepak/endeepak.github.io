<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | !geek]]></title>
  <link href="http://tech.endeepak.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://tech.endeepak.com/"/>
  <updated>2014-07-27T20:29:01+05:30</updated>
  <id>http://tech.endeepak.com/</id>
  <author>
    <name><![CDATA[Deepak Narayana Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make sure functional tests are application technology agnostic]]></title>
    <link href="http://tech.endeepak.com/blog/2014/07/27/make-sure-functional-tests-are-application-technology-agnostic"/>
    <updated>2014-07-27T16:43:49+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/07/27/make-sure-functional-tests-are-application-technology-agnostic</id>
    <content type="html"><![CDATA[<p>In modern day web applications, most of the data is fetched and saved using ajax calls and the mark up is generated on client side by compiling static HTML templates. When writing functional tests, we need to make sure assertions wait till completion of ajax call and HTML is generated from templates.</p>

<p>Sometimes people end up with either using <code>sleep(xSeconds)</code> or <code>wait_for_ajax</code> like this</p>

<!-- More -->


<p>``` ruby
fiil_in &lsquo;name&rsquo;, :with => &lsquo;foo&rsquo; # you might be using a page object pattern in real code
click_on &lsquo;Save&rsquo;
wait_for_ajax
expect(find(&lsquo;#number_of_people&rsquo;).text).to be(10)</p>

<h1>The implementation of wait_for_ajax which depends on jQuery.active</h1>

<p>def wait_for_ajax</p>

<pre><code>wait_until { page.evaluate_script('jQuery.active') == 0 }
</code></pre>

<p>end
```</p>

<p>The above solutions make your tests indeterministic or dependent on javascript framework used in application. Fortunately frameworks like capybara have implicit wait mechanism which eliminates the need for <code>wait_for_ajax</code></p>

<p><code>ruby
click_on 'Save'
expect(find('#number_of_people').to have_content(10) # Implicit wait
</code></p>

<p>But, you may not be able to use this when</p>

<ul>
<li>You are not using framework like capybara <em>or</em></li>
<li>The assertion is done on data saved in a database or file system</li>
</ul>


<p> In these cases, you should not go back to <code>wait_for_ajax</code> or <code>sleep</code> solutions. Instead of depending on technical details of the app, you need to think in terms of</p>

<blockquote><p>How does the user know app is done loading or saving data?</p></blockquote>

<p>This will give you a hint on any missing usability requirements in the app. You must have a visual clue in the app to indicate the progress. Your functional tests should also depend on this indicator (like a spinner, overlay etc) to figure out when to assert on data.</p>

<p>``` ruby</p>

<h1>click</h1>

<p>wait_for_completion</p>

<h1>assert</h1>

<h1>Example implementation of wait_for_completion</h1>

<p>def wait_for_completion</p>

<pre><code>wait_until { page.find('#loading-indicator').visible? == false }
</code></pre>

<p>end
```
These type of tests can provide early feedback on the user experience.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep your models independent of angular]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/18/keep-your-models-independent-of-angular"/>
    <updated>2014-05-18T16:38:01+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/18/keep-your-models-independent-of-angular</id>
    <content type="html"><![CDATA[<blockquote><p>If you are using MVC framework you need to make sure controllers are very thin and domain logic lies in small, framework independent, composable models &ndash; Wise People</p></blockquote>

<p>In AngularJS, you need to make sure lot of data is not defined directly on $scope and domain logic is not dependent on angular&rsquo;s digest cycle. If follow this mantra, unit testing the models would be a lot simpler which in turn is a indicates that your code in is good shape.</p>

<!-- More -->


<p>Alright lets get to some code. Let&rsquo;s consider a simple example where we have a form to capture person&rsquo;s information such as firstName, lastName, age or dateOfBirth. The age or dateOfBirth should be auto populated based on its counter part.</p>

<p>```js Bad code
//In controller
$scope.firstName = &ldquo;&rdquo;
$scope.lastName = &ldquo;&rdquo;
$scope.fullName = function() {</p>

<pre><code>return $scope.firstName + ' ' + $scope.lastName; 
</code></pre>

<p>}
$scope.age = &ldquo;&rdquo;
$scope.dateOfBirth = &ldquo;&rdquo;
$scope.$watch(&lsquo;age&rsquo;, setDateOfBirthBasedOnAge);
$scope.$watch(&lsquo;dateOfBirth&rsquo;, setAgeBasedOnDateOfBirth);
```</p>

<p>If you want to test the logic to compute fullName or age&lt;&ndash;>dateOfBirth logic, you will have to use angular-mock and inject $scope in your tests. This leads to lot of unnecessary boilerplate code. Lets look at how to refactor this code.</p>

<h4>Refactor 1 : Introduce a model</h4>

<p>```js
//Model
var Person = function() {</p>

<pre><code>this.firstName = ""
this.lastName = ""
this.fullName = function() { 
    return this.firstName + ' ' + this.lastName; 
}
this.age = ""
this.dateOfBirth = ""
</code></pre>

<p>}</p>

<p>//In controller
$scope.person = new Person();
$scope.$watch(&lsquo;person.age&rsquo;, setDateOfBirthBasedOnAge);
$scope.$watch(&lsquo;person.dateOfBirth&rsquo;, setAgeBasedOnDateOfBirth);
```
Now you can simply instante a person object and test the fullName method.</p>

<h4>Refactor 2 : Remove dependency on $scope.$watch</h4>

<p>In this step we will use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">Object.defineProperty</a>, ES5 API which works on <a href="http://kangax.github.io/compat-table/es5/#Object.defineProperty">most of the browsers</a></p>

<p>```js
//Model
var Person = function() {</p>

<pre><code>..      //lastName, firstName, fullName code remains same as above
var _age, _dateOfBirth; // Private fields

Object.defineProperty(this, 'age', {
    get: function() { return _age; }
    set: fubction(value) {
        _age = value;
        setDateOfBirthBasedOnAge();
    }
});

Object.defineProperty(this, 'dateOfBirth', {
    get: function() { return _dateOfBirth; }
    set: fubction(value) {
        _dateOfBirth = value;
        setAgeBasedOnDateOfBirth();
    }
});
</code></pre>

<p>}</p>

<p>//In controller
$scope.person = new Person();
```
After this step, your domain logic can be tested without having to use angular-mock or injectors etc.</p>

<h3>Conclusion</h3>

<p>One of the boasted feature in AngualrJS is using POJOs for data binding, compared to using special observables or models  in knockout, ember etc. If this is one of the reason you are using AngularJS, it is very important to make sure your domain logic doesn&rsquo;t leak into controllers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript functions in JSON configuration]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/18/javascript-functions-in-json-configuration"/>
    <updated>2014-05-18T15:20:32+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/18/javascript-functions-in-json-configuration</id>
    <content type="html"><![CDATA[<p>There is no native support for defining functions in JSON. Commonly used approach is to define function as string and use <code>eval()</code> or <code>new Function()</code> to contruct the function. The basic difference between these two are</p>

<ul>
<li><code>eval()</code> works within the current execution scope. It can access or modify local variables.</li>
<li><code>new Function()</code> runs in a separate scope. It cannot access or modify local variables.</li>
</ul>


<p>These samples show how the json would differ in these two cases</p>

<!-- More -->


<p>```js Using eval()
// JSON config
{</p>

<pre><code>section: "Additional Details",
showIf: "function(context) { return context.person.age &gt; 60; }"
</code></pre>

<p>}</p>

<p>//This can parsed in javascript as
var showIf = eval(&lsquo;(&rsquo; + config.showIf + &lsquo;)&rsquo;)
var shouldShowThisSection = showIf({person: personData}));
```</p>

<p>```js Using new Function()
// JSON config
{</p>

<pre><code>section: "Additional Details",
showIf: "return context.person.age &gt; 60"
</code></pre>

<p>}</p>

<p>//This can parsed in javascript as
var showIf = new Function(&lsquo;context&rsquo;, config.showIf)
var shouldShowThisSection = showIf({person: personData}));
```</p>

<p>You can use either based on the use case in your application. In <a href="http://bahmni.org">bahmni</a>, we went with <code>new Function()</code> for couple of reasons</p>

<ul>
<li>We did not want config code to modify variables in application execution scope by mistake.</li>
<li>We wanted to control the function signature such as number of parameters and its name to keep it simple and less error prone.</li>
</ul>


<p>If you prefer using <code>eval</code> syntax, try <a href="https://github.com/vkiryukhin/jsonfn">vkiryukhin/jsonfn</a>.</p>

<h4>Multi line functions</h4>

<p>The above examples work fine for sinle line expressions. If you need multiple line functions, you need to tweak it a bit. Firstly, JSON does not support multiline string. The work around is to define an array of strings as shown below.</p>

<p>```js Multi line functions parsed using new Function()
// JSON config
{</p>

<pre><code>section: "Additional Details",
showIf: ["if(context.person.gender === 'M' &amp;&amp; context.person.age &gt; 60)",
            "return true;", 
         "else if(context.person.gender === 'F' &amp;&amp; context.person.age &gt; 55)",
            "return true;", 
        "else",
            "return false;"] 
</code></pre>

<p>}</p>

<p>//This can parsed in javascript as
var showIf = new Function(&lsquo;context&rsquo;, config.showIf.join(&ldquo;\n&rdquo;))
var shouldShowThisSection = showIf({person: personData}));
```</p>

<h4>Performance</h4>

<p>There is not much difference in performance when you define a function using <code>function() {}</code> expression <code>eval(&lsquo;function() {}&rsquo;)</code> or <code>new Function()</code>. Have a look at this <a href="http://jsperf.com/function-vs-new-function-vs-eval-function">benchmark</a> using jsperf.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spinners in single page apps]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/11/spinners-in-single-page-apps"/>
    <updated>2014-05-11T16:55:23+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/11/spinners-in-single-page-apps</id>
    <content type="html"><![CDATA[<p>One of the good practices in single page apps, is to show spinners (overlay + loading icon) while retrieving data or saving asynchronously. Often people tend to add a generic interceptor to show spinner for all ajax calls. In any mid size app, you will realize that the assumption <strong>&ldquo;Show an overlay for all ajax call&rdquo;</strong> is incorrect. Few examples</p>

<ul>
<li>An <a href="http://jqueryui.com/autocomplete/">autocomplete</a> input box fetching reote data</li>
<li>An infininte scroll fetching more data as the use scrolls down the list.</li>
</ul>


<!-- More -->


<p>To solve this, one might add an option in interceptor to not show spinner for certain calls. This leads to complicated code due to initial wrong assumption. A better soultion is to have simple reusable code to show/hide spinner and use it explicitly for calls which need spinner.</p>

<p>If you are using a library which returns a promise for ajax call(or object like xhr returned by jQuery.ajax), the API and implementation would look like this.</p>

<p>```js Api should be simple as
spinner.forPromise($http.get(&lsquo;/items&rsquo;)) //AngularJS</p>

<p>spinner.forPromise($.ajax(&lsquo;/items&rsquo;)) //jQuery
```</p>

<p>```js Simple Spinner Implementation in AngularJS
myModule.factory(&lsquo;spinner&rsquo;, function () {</p>

<pre><code>var forPromise = function(promise) {
    $('#overlay').show();
    promise['finally'](function(){ //use promise.always(hide) in jQuery
        $('#overlay').hide();
    }); 
};

return { forPromise: forPromise }
</code></pre>

<p> )
```</p>

<p>If you have a multiple components of the page using same spinner, we need to enhance the the code to make sure spinner is hidden only after both components have completed async calls. This can be implemented by keeping spinner count as shown below.</p>

<p>```js Muliple Call Supported Spinner Implementation in AngularJS
myModule.factory(&lsquo;spinner&rsquo;, function () {</p>

<pre><code>var showCount = 0;

var show = function () {
    showCount++;
    $('#overlay').show();
}

var hide = function () {
    showCount--;
    if(showCount === 0) {
        $('#overlay').hide();
    }
}

var forPromise = function(promise) {
    show();
    promise['finally'](hide); //use promise.always(hide) in jQuery
};

return { forPromise: forPromise };
</code></pre>

<p> )
```</p>

<p>In <a href="http://www.bahmni.org">Bahmni</a>, we use a spinner with animation which can be found <a href="https://github.com/Bhamni/openmrs-module-bahmniapps/blob/master/ui/app/common/ui-helper/spinner.js">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Printing external html templates using AngularJS]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/printing-external-html-templates-using-angularjs"/>
    <updated>2014-05-03T20:50:48+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/printing-external-html-templates-using-angularjs</id>
    <content type="html"><![CDATA[<h2>Use case</h2>

<p>In <a href="http://bahmni.org">Bahmni</a> EMR we needed to support customizable html templates for printing patient regisatrtion card and other printable documents. We needed a print API which looks like</p>

<p>```js
//Contract
printer.print(templateUrl, data)</p>

<p>//This would called on clicking the print button
printer.print(&lsquo;/config/registrationCardTempate.html&rsquo;, {patient: {name: &lsquo;Ram Kumar&rsquo;, dateOfBirth: &lsquo;1978-08-23&rsquo;, gender: &rsquo;M'}})
```</p>

<!-- more -->


<p>Sample html template</p>

<p>```html
<link rel="stylesheet" href="http://tech.endeepak.com/config/registrationCard.css"/>
<img src="http://tech.endeepak.com/config/logo.jpg"><img></p>

<h1>The hospital name</h1>


<table>
    <tr><td>Name</td><td ng-bind="patient.name"></td></tr>
    <tr><td>Age</td><td ng-bind="patient.dateOfBirth | age"></td></tr>
    <tr><td>Gender</td><td ng-bind="patient.gender"></td></tr>
</table>


<p>```</p>

<h2>Implementation</h2>

<p>As the app is built using angularjs, we decided to use angular as the templating engine for rendering these templates as well. This also helped to reuse filters and other templating features of angular. The implementation consists of following steps</p>

<ol>
<li>Fetch the html template</li>
<li>Compile the html template with given data using angular&rsquo;s $complile</li>
<li>Wait for angular to complete rendering the template (Explained <a href="http://tech.endeepak.com/blog/2014/05/03/waiting-for-angularjs-digest-cycle">here</a>)</li>
<li>Print the html(Explained <a href="http://tech.endeepak.com/blog/2014/05/03/printing-html-with-image-and-css">here</a>)</li>
</ol>


<p>The code for print function looks like this</p>

<p>```js
var print = function (templateUrl, data) {</p>

<pre><code>$http.get(templateUrl).success(function(template){
    var printScope = angular.extend($rootScope.$new(), data);
    var element = $compile($('&lt;div&gt;' + template + '&lt;/div&gt;'))(printScope);
    var waitForRenderAndPrint = function() {
        if(printScope.$$phase || $http.pendingRequests.length) {
            $timeout(waitForRenderAndPrint);
        } else {
            printHtml(element.html());
            printScope.$destroy(); // To avoid memory leaks from scope create by $rootScope.$new()
        }
    }
    waitForRenderAndPrint();
});
</code></pre>

<p>};
```
The complete solution is available on <a href="https://github.com/Bhamni/openmrs-module-bahmniapps/blob/master/ui/app/common/ui-helper/printer.js">github</a>.</p>
]]></content>
  </entry>
  
</feed>
