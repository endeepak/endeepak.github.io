<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | !geek]]></title>
  <link href="http://tech.endeepak.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://tech.endeepak.com/"/>
  <updated>2014-05-17T17:12:00+05:30</updated>
  <id>http://tech.endeepak.com/</id>
  <author>
    <name><![CDATA[Deepak Narayana Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spinners in single page apps]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/11/spinners-in-single-page-apps"/>
    <updated>2014-05-11T16:55:23+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/11/spinners-in-single-page-apps</id>
    <content type="html"><![CDATA[<p>One of the good practices in single page apps, is to show spinners (overlay + loading icon) while retrieving data or saving asynchronously. Often people tend to add a generic interceptor to show spinner for all ajax calls. In any mid size app, you will realize that the assumption <strong>&ldquo;Show an overlay for all ajax call&rdquo;</strong> is incorrect. Few examples</p>

<ul>
<li>An <a href="http://jqueryui.com/autocomplete/">autocomplete</a> input box fetching reote data</li>
<li>An infininte scroll fetching more data as the use scrolls down the list.</li>
</ul>


<!-- More -->


<p>To solve this, one might add an option in interceptor to not show spinner for certain calls. This leads to complicated code due to initial wrong assumption. A better soultion is to have simple reusable code to show/hide spinner and use it explicitly for calls which need spinner.</p>

<p>If you are using a library which returns a promise for ajax call(or object like xhr returned by jQuery.ajax), the API and implementation would look like this.</p>

<p>```js Api should be simple as
spinner.forPromise($http.get(&lsquo;/items&rsquo;)) //AngularJS</p>

<p>spinner.forPromise($.ajax(&lsquo;/items&rsquo;)) //jQuery
```</p>

<p>```js Simple Spinner Implementation in AngularJS
myModule.factory(&lsquo;spinner&rsquo;, function () {</p>

<pre><code>var forPromise = function(promise) {
    $('#overlay').show();
    promise['finally'](function(){ //use promise.always(hide) in jQuery
        $('#overlay').hide();
    }); 
};

return { forPromise: forPromise }
</code></pre>

<p> )
```</p>

<p>If you have a multiple components of the page using same spinner, we need to enhance the the code to make sure spinner is hidden only after both components have completed async calls. This can be implemented by keeping spinner count as shown below.</p>

<p>```js Muliple Call Supported Spinner Implementation in AngularJS
myModule.factory(&lsquo;spinner&rsquo;, function () {</p>

<pre><code>var showCount = 0;

var show = function () {
    showCount++;
    $('#overlay').show();
}

var hide = function () {
    showCount--;
    if(showCount === 0) {
        $('#overlay').hide();
    }
}

var forPromise = function(promise) {
    show();
    promise['finally'](hide); //use promise.always(hide) in jQuery
};

return { forPromise: forPromise };
</code></pre>

<p> )
```</p>

<p>In <a href="http://www.bahmni.org">Bahmni</a>, we use a spinner with animation which can be found <a href="https://github.com/Bhamni/openmrs-module-bahmniapps/blob/master/ui/app/common/ui-helper/spinner.js">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Printing external html templates using AngularJS]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/printing-external-html-templates-using-angularjs"/>
    <updated>2014-05-03T20:50:48+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/printing-external-html-templates-using-angularjs</id>
    <content type="html"><![CDATA[<h2>Use case</h2>

<p>In <a href="http://bahmni.org">Bahmni</a> EMR we needed to support customizable html templates for printing patient regisatrtion card and other printable documents. We needed a print API which looks like</p>

<p>```js
//Contract
printer.print(templateUrl, data)</p>

<p>//This would called on clicking the print button
printer.print(&lsquo;/config/registrationCardTempate.html&rsquo;, {patient: {name: &lsquo;Ram Kumar&rsquo;, dateOfBirth: &lsquo;1978-08-23&rsquo;, gender: &rsquo;M'}})
```</p>

<!-- more -->


<p>Sample html template</p>

<p>```html
<link rel="stylesheet" href="http://tech.endeepak.com/config/registrationCard.css"/>
<img src="http://tech.endeepak.com/config/logo.jpg"><img></p>

<h1>The hospital name</h1>


<table>
    <tr><td>Name</td><td ng-bind="patient.name"></td></tr>
    <tr><td>Age</td><td ng-bind="patient.dateOfBirth | age"></td></tr>
    <tr><td>Gender</td><td ng-bind="patient.gender"></td></tr>
</table>


<p>```</p>

<h2>Implementation</h2>

<p>As the app is built using angularjs, we decided to use angular as the templating engine for rendering these templates as well. This also helped to reuse filters and other templating features of angular. The implementation consists of following steps</p>

<ol>
<li>Fetch the html template</li>
<li>Compile the html template with given data using angular&rsquo;s $complile</li>
<li>Wait for angular to complete rendering the template (Explained <a href="http://tech.endeepak.com/blog/2014/05/03/waiting-for-angularjs-digest-cycle">here</a>)</li>
<li>Print the html(Explained <a href="http://tech.endeepak.com/blog/2014/05/03/printing-html-with-image-and-css">here</a>)</li>
</ol>


<p>The code for print function looks like this</p>

<p>```js
var print = function (templateUrl, data) {</p>

<pre><code>$http.get(templateUrl).success(function(template){
    var printScope = angular.extend($rootScope.$new(), data);
    var element = $compile($('&lt;div&gt;' + template + '&lt;/div&gt;'))(printScope);
    var waitForRenderAndPrint = function() {
        if(printScope.$$phase || $http.pendingRequests.length) {
            $timeout(waitForRenderAndPrint);
        } else {
            printHtml(element.html());
            printScope.$destroy(); // To avoid memory leaks from scope create by $rootScope.$new()
        }
    }
    waitForRenderAndPrint();
});
</code></pre>

<p>};
```
The complete solution is available on <a href="https://github.com/Bhamni/openmrs-module-bahmniapps/blob/master/ui/app/common/ui-helper/printer.js">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Waiting for AngularJS digest cycle]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/waiting-for-angularjs-digest-cycle"/>
    <updated>2014-05-03T17:43:34+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/waiting-for-angularjs-digest-cycle</id>
    <content type="html"><![CDATA[<p>The million dollar question most of the AngularJS users(devs) end up asking is</p>

<ul>
<li>How to wait for angular digest cycle to be completed?  <em>or in simple terms</em></li>
<li>How to wait for browser to complete rendering the view with angular bindings?</li>
</ul>


<!-- more -->


<p>AngularJS does not raise any event to notify this. The suggested simple solution is to use $timeout to queue your work to be run after current digest cycle (also waits for DOM renedering to be completed by the browser).</p>

<p>```js
$timeout(function(){</p>

<pre><code>//the code which needs to run after dom rendering
</code></pre>

<p>})
```</p>

<p>The above solution works only for views which don&rsquo;t have ng-include or directives with template url. In this case you have to wait for all the templates to be loaded(async) and then run your code. This can be achived by waiting for <a href="https://docs.angularjs.org/api/ng/service/$http#pendingRequests">$http.pendingRequests</a> to be zero. The enhanced solution is</p>

<p>```js
var waitForRenderAndDoSomething = function() {</p>

<pre><code>if($http.pendingRequests.length &gt; 0) {
    $timeout(waitForRenderAndDoSomething); // Wait for all templates to be loaded
} else {
    //the code which needs to run after dom rendering
}
</code></pre>

<p>}
$timeout(waitForRenderAndDoSomething); // Waits for first digest cycle
```</p>

<p>Hopefully AngularJS will come up with a easier solution in future releases.</p>

<h4>Note</h4>

<p>The <a href="https://docs.angularjs.org/api/ng/service/$http#pendingRequests">$http.pendingRequests</a> supposed to be used for debugging purpose only. If angular team decides to remove this, you can implement the same using http interceptors as suggested in this <a href="http://stackoverflow.com/a/20062899/69362">link</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Printing html with image and css]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/printing-html-with-image-and-css"/>
    <updated>2014-05-03T16:54:00+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/printing-html-with-image-and-css</id>
    <content type="html"><![CDATA[<p>There are plenty of examples for printing html of an element. Most of them look like this</p>

<p>```js
//The simple soultion but has few problems listed below.
function printHtml(html)
{</p>

<pre><code>var mywindow = window.open();
mywindow.document.write('&lt;html&gt;&lt;head&gt;&lt;title&gt;My App&lt;/title&gt;');
mywindow.document.write('&lt;/head&gt;&lt;body&gt;');
mywindow.document.write(html);
mywindow.document.write('&lt;/body&gt;&lt;/html&gt;');
mywindow.print();
mywindow.close();
return true;
</code></pre>

<p>}
```
The issues with above solution:</p>

<!-- more -->


<ol>
<li>The new window pop up would be blocked by browsers. Users need to enable pop up.</li>
<li>If you have external css files, you will notice the styling not applied some times.</li>
<li>If you have images(like logo), the print will be missing these images intermittently.</li>
</ol>


<p>The first issue can be addressed by using an iframe instead of new window. The 2nd and 3rd issues are addressed by making sure print happens after page has loaded css files and images. The working solution we use in <a href="http://www.bahmni.org">Bahmni</a> for printing patient registration cards looks like this</p>

<p>```js
var printHtml = function (html) {</p>

<pre><code>var hiddenFrame = $('&lt;iframe style="display: none"&gt;&lt;/iframe&gt;').appendTo('body')[0];
hiddenFrame.contentWindow.printAndRemove = function() {
    hiddenFrame.contentWindow.print();
    $(hiddenFrame).remove();
};
var htmlDocument = "&lt;!doctype html&gt;"+
            "&lt;html&gt;"+
                '&lt;body onload="printAndRemove();"&gt;' + // Print only after document is loaded
                    html +
                '&lt;/body&gt;'+
            "&lt;/html&gt;";
var doc = hiddenFrame.contentWindow.document.open("text/html", "replace");
doc.write(htmlDocument);
doc.close();
</code></pre>

<p>};
```</p>

<p>For printing contents of an element you can use this</p>

<p>```js
//element can be found by document.querySelectorAll(slector)[0]
//or using jQuery(selector)[0]
var printElement = function (element) {</p>

<pre><code>printHtml(element.innerHTML)
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging angular view bindings]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/debugging-angular-view-bindings"/>
    <updated>2014-05-03T09:34:54+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/debugging-angular-view-bindings</id>
    <content type="html"><![CDATA[<p>The way to debug problems with <code></code> or <code>ng-bind</code> or any other directive is to use <a href="https://docs.angularjs.org/api/ng/function/angular.element">angular.element</a> method.</p>

<!-- more -->


<p>Example: If you want to debug missing data in <code>&lt;span>Name : &lt;/span></code></p>

<ul>
<li>Right click on the span and click Inspect element. Make sure span is selected in the elements tab</li>
<li>Go to console tab and type</li>
</ul>


<p><code>js
angular.element($0).scope().pesron.fullName()
</code>
Using <code>angular.element($0).scope()</code> you can inspect the data on scope. The angular.element can also get references to controller, injector using which you can inspect other objects.</p>

<p>```js
//Get controller
angular.element($0).controller()</p>

<p>//Getting injector and other objects
var injector = angular.element($0).injector()
injector.get(&lsquo;$rootScope&rsquo;)
injector.get(&lsquo;myService&rsquo;)
```</p>

<p>The other alternative is to use chrome extension <a href="https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en">AngularJS Batarang</a>. This will add AngularJS tab in developer Tools. It lists all scopes in the current page. But finding the correct scope for a particualr element quite difficult. The &ldquo;Enable Inspector&rdquo; button in batarang doesn&rsquo;t work that well. So far the <a href="https://docs.angularjs.org/api/ng/function/angular.element">angular.element</a> is the best way to debug binding issues.</p>
]]></content>
  </entry>
  
</feed>
