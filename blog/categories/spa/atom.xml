<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: spa | !geek]]></title>
  <link href="http://tech.endeepak.com/blog/categories/spa/atom.xml" rel="self"/>
  <link href="http://tech.endeepak.com/"/>
  <updated>2017-12-22T11:46:16+05:30</updated>
  <id>http://tech.endeepak.com/</id>
  <author>
    <name><![CDATA[Deepak Narayana Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Make sure functional tests are user centric]]></title>
    <link href="http://tech.endeepak.com/blog/2014/07/27/make-sure-functional-tests-are-user-centric"/>
    <updated>2014-07-27T16:43:49+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/07/27/make-sure-functional-tests-are-user-centric</id>
    <content type="html"><![CDATA[<p>In modern day web applications, most of the data is fetched and saved using ajax calls and the mark up is generated on client side by compiling static HTML templates. The functional tests need to make sure assertions wait till completion of ajax call.</p>

<p>Couple of bad ways to achieve this is by using <code>sleep(xSeconds)</code> or <code>wait_for_ajax</code> like this</p>

<!-- More -->


<pre><code class="ruby">fiil_in 'name', :with =&gt; 'foo' # you might be using a page object pattern in real code
click_on 'Save' 
wait_for_ajax
expect(find('#number_of_people').text).to be(10)

# The implementation of wait_for_ajax which depends on jQuery.active
def wait_for_ajax
    wait_until { page.evaluate_script('jQuery.active') == 0 }
end
</code></pre>

<p>The <code>sleep(xSeconds)</code> makes your tests indeterministic and <code>wait_for_ajax</code> makes it dependent on javascript framework used in application.</p>

<h2>Solution 1 : Choose a good framework</h2>

<p>Frameworks like capybara have implicit wait mechanism which eliminates the need for <code>wait_for_ajax</code></p>

<pre><code class="ruby">click_on 'Save' 
expect(find('#number_of_people').to have_content(10) # Implicit wait
</code></pre>

<p>But what happens when</p>

<ul>
<li>You are not using framework like capybara <em>or</em></li>
<li>The assertion is done on data saved in a database or file system</li>
</ul>


<p> In these cases, don&rsquo;t go back to <code>wait_for_ajax</code> or <code>sleep</code> solutions. Instead of depending on technical details of the app, you need to think in terms of</p>

<blockquote><p>How does the user know app is done loading or saving data?</p></blockquote>

<p>This will give you a hint on any missing usability requirements in the app.</p>

<h2>Solution 2 : Think like a user</h2>

<p>When you think like user, you will realize there must be a visual clue in the app to indicate the progress. The functional tests should also depend on this indicator (like a spinner, overlay etc) to figure out when to assert on data.</p>

<pre><code class="ruby"># click
wait_for_completion
# assert

# Example implementation of wait_for_completion
def wait_for_completion
    wait_until { page.find('#loading-indicator').visible? == false }
end
</code></pre>

<p>When your tests user centric, they provide valuable feedback on the user experience.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spinners in single page apps]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/11/spinners-in-single-page-apps"/>
    <updated>2014-05-11T16:55:23+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/11/spinners-in-single-page-apps</id>
    <content type="html"><![CDATA[<p>One of the good practices in single page apps, is to show spinners (overlay + loading icon) while retrieving data or saving asynchronously. Often people tend to add a generic interceptor to show spinner for all ajax calls. In any mid size app, you will realize that the assumption <strong>&ldquo;Show an overlay for all ajax call&rdquo;</strong> is incorrect. Few examples</p>

<ul>
<li>An <a href="http://jqueryui.com/autocomplete/">autocomplete</a> input box fetching reote data</li>
<li>An infininte scroll fetching more data as the use scrolls down the list.</li>
</ul>


<!-- More -->


<p>To solve this, one might add an option in interceptor to not show spinner for certain calls. This leads to complicated code due to initial wrong assumption. A better soultion is to have simple reusable code to show/hide spinner and use it explicitly for calls which need spinner.</p>

<p>If you are using a library which returns a promise for ajax call(or object like xhr returned by jQuery.ajax), the API and implementation would look like this.</p>

<pre><code class="js Api should be simple as">spinner.forPromise($http.get('/items')) //AngularJS

spinner.forPromise($.ajax('/items')) //jQuery
</code></pre>

<pre><code class="js Simple Spinner Implementation in AngularJS">myModule.factory('spinner', function () {
    var forPromise = function(promise) {
        $('#overlay').show();
        promise['finally'](function(){ //use promise.always(hide) in jQuery
            $('#overlay').hide();
        }); 
    };

    return { forPromise: forPromise }
 )
</code></pre>

<p>If you have a multiple components of the page using same spinner, we need to enhance the the code to make sure spinner is hidden only after both components have completed async calls. This can be implemented by keeping spinner count as shown below.</p>

<pre><code class="js Muliple Call Supported Spinner Implementation in AngularJS">myModule.factory('spinner', function () {
    var showCount = 0;

    var show = function () {
        showCount++;
        $('#overlay').show();
    }

    var hide = function () {
        showCount--;
        if(showCount === 0) {
            $('#overlay').hide();
        }
    }

    var forPromise = function(promise) {
        show();
        promise['finally'](hide); //use promise.always(hide) in jQuery
    };

    return { forPromise: forPromise };
 )
</code></pre>

<p>In <a href="http://www.bahmni.org">Bahmni</a>, we use a spinner with animation which can be found <a href="https://github.com/Bhamni/openmrs-module-bahmniapps/blob/master/ui/app/common/ui-helper/spinner.js">here</a>.</p>
]]></content>
  </entry>
  
</feed>
