<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: json | !geek]]></title>
  <link href="http://tech.endeepak.com/blog/categories/json/atom.xml" rel="self"/>
  <link href="http://tech.endeepak.com/"/>
  <updated>2019-02-14T06:52:00+05:30</updated>
  <id>http://tech.endeepak.com/</id>
  <author>
    <name><![CDATA[Deepak Narayana Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Javascript functions in JSON configuration]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/18/javascript-functions-in-json-configuration"/>
    <updated>2014-05-18T15:20:32+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/18/javascript-functions-in-json-configuration</id>
    <content type="html"><![CDATA[<p>There is no native support for defining functions in JSON. Commonly used approach is to define function as string and use <code>eval()</code> or <code>new Function()</code> to contruct the function. The basic difference between these two are</p>

<ul>
<li><code>eval()</code> works within the current execution scope. It can access or modify local variables.</li>
<li><code>new Function()</code> runs in a separate scope. It cannot access or modify local variables.</li>
</ul>


<p>These samples show how the json would differ in these two cases</p>

<!-- More -->


<pre><code class="js Using eval()">// JSON config
{
    section: "Additional Details",
    showIf: "function(context) { return context.person.age &gt; 60; }"
}

//This can parsed in javascript as
var showIf = eval('(' + config.showIf + ')')
var shouldShowThisSection = showIf({person: personData}));
</code></pre>

<pre><code class="js Using new Function()">// JSON config
{
    section: "Additional Details",
    showIf: "return context.person.age &gt; 60"
}

//This can parsed in javascript as
var showIf = new Function('context', config.showIf)
var shouldShowThisSection = showIf({person: personData}));
</code></pre>

<p>You can use either based on the use case in your application. In <a href="http://bahmni.org">bahmni</a>, we went with <code>new Function()</code> for couple of reasons</p>

<ul>
<li>We did not want config code to modify variables in application execution scope by mistake.</li>
<li>We wanted to control the function signature such as number of parameters and its name to keep it simple and less error prone.</li>
</ul>


<p>If you prefer using <code>eval</code> syntax, try <a href="https://github.com/vkiryukhin/jsonfn">vkiryukhin/jsonfn</a>.</p>

<h4>Multi line functions</h4>

<p>The above examples work fine for sinle line expressions. If you need multiple line functions, you need to tweak it a bit. Firstly, JSON does not support multiline string. The work around is to define an array of strings as shown below.</p>

<pre><code class="js Multi line functions parsed using new Function()">// JSON config
{
    section: "Additional Details",
    showIf: ["if(context.person.gender === 'M' &amp;&amp; context.person.age &gt; 60)",
                "return true;", 
             "else if(context.person.gender === 'F' &amp;&amp; context.person.age &gt; 55)",
                "return true;", 
            "else",
                "return false;"] 
}

//This can parsed in javascript as
var showIf = new Function('context', config.showIf.join("\n"))
var shouldShowThisSection = showIf({person: personData}));
</code></pre>

<h4>Performance</h4>

<p>There is not much difference in performance when you define a function using <code>function() {}</code> expression <code>eval(&lsquo;function() {}&rsquo;)</code> or <code>new Function()</code>. Have a look at this <a href="http://jsperf.com/function-vs-new-function-vs-eval-function">benchmark</a> using jsperf.</p>
]]></content>
  </entry>
  
</feed>
