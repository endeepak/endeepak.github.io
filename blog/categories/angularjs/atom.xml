<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: angularjs | !geek]]></title>
  <link href="http://tech.endeepak.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://tech.endeepak.com/"/>
  <updated>2014-05-18T12:13:04+05:30</updated>
  <id>http://tech.endeepak.com/</id>
  <author>
    <name><![CDATA[Deepak Narayana Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Printing external html templates using AngularJS]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/printing-external-html-templates-using-angularjs"/>
    <updated>2014-05-03T20:50:48+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/printing-external-html-templates-using-angularjs</id>
    <content type="html"><![CDATA[<h2>Use case</h2>

<p>In <a href="http://bahmni.org">Bahmni</a> EMR we needed to support customizable html templates for printing patient regisatrtion card and other printable documents. We needed a print API which looks like</p>

<p>```js
//Contract
printer.print(templateUrl, data)</p>

<p>//This would called on clicking the print button
printer.print(&lsquo;/config/registrationCardTempate.html&rsquo;, {patient: {name: &lsquo;Ram Kumar&rsquo;, dateOfBirth: &lsquo;1978-08-23&rsquo;, gender: &rsquo;M'}})
```</p>

<!-- more -->


<p>Sample html template</p>

<p>```html
<link rel="stylesheet" href="http://tech.endeepak.com/config/registrationCard.css"/>
<img src="http://tech.endeepak.com/config/logo.jpg"><img></p>

<h1>The hospital name</h1>


<table>
    <tr><td>Name</td><td ng-bind="patient.name"></td></tr>
    <tr><td>Age</td><td ng-bind="patient.dateOfBirth | age"></td></tr>
    <tr><td>Gender</td><td ng-bind="patient.gender"></td></tr>
</table>


<p>```</p>

<h2>Implementation</h2>

<p>As the app is built using angularjs, we decided to use angular as the templating engine for rendering these templates as well. This also helped to reuse filters and other templating features of angular. The implementation consists of following steps</p>

<ol>
<li>Fetch the html template</li>
<li>Compile the html template with given data using angular&rsquo;s $complile</li>
<li>Wait for angular to complete rendering the template (Explained <a href="http://tech.endeepak.com/blog/2014/05/03/waiting-for-angularjs-digest-cycle">here</a>)</li>
<li>Print the html(Explained <a href="http://tech.endeepak.com/blog/2014/05/03/printing-html-with-image-and-css">here</a>)</li>
</ol>


<p>The code for print function looks like this</p>

<p>```js
var print = function (templateUrl, data) {</p>

<pre><code>$http.get(templateUrl).success(function(template){
    var printScope = angular.extend($rootScope.$new(), data);
    var element = $compile($('&lt;div&gt;' + template + '&lt;/div&gt;'))(printScope);
    var waitForRenderAndPrint = function() {
        if(printScope.$$phase || $http.pendingRequests.length) {
            $timeout(waitForRenderAndPrint);
        } else {
            printHtml(element.html());
            printScope.$destroy(); // To avoid memory leaks from scope create by $rootScope.$new()
        }
    }
    waitForRenderAndPrint();
});
</code></pre>

<p>};
```
The complete solution is available on <a href="https://github.com/Bhamni/openmrs-module-bahmniapps/blob/master/ui/app/common/ui-helper/printer.js">github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Waiting for AngularJS digest cycle]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/waiting-for-angularjs-digest-cycle"/>
    <updated>2014-05-03T17:43:34+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/waiting-for-angularjs-digest-cycle</id>
    <content type="html"><![CDATA[<p>The million dollar question most of the AngularJS users(devs) end up asking is</p>

<ul>
<li>How to wait for angular digest cycle to be completed?  <em>or in simple terms</em></li>
<li>How to wait for browser to complete rendering the view with angular bindings?</li>
</ul>


<!-- more -->


<p>AngularJS does not raise any event to notify this. The suggested simple solution is to use $timeout to queue your work to be run after current digest cycle (also waits for DOM renedering to be completed by the browser).</p>

<p>```js
$timeout(function(){</p>

<pre><code>//the code which needs to run after dom rendering
</code></pre>

<p>})
```</p>

<p>The above solution works only for views which don&rsquo;t have ng-include or directives with template url. In this case you have to wait for all the templates to be loaded(async) and then run your code. This can be achived by waiting for <a href="https://docs.angularjs.org/api/ng/service/$http#pendingRequests">$http.pendingRequests</a> to be zero. The enhanced solution is</p>

<p>```js
var waitForRenderAndDoSomething = function() {</p>

<pre><code>if($http.pendingRequests.length &gt; 0) {
    $timeout(waitForRenderAndDoSomething); // Wait for all templates to be loaded
} else {
    //the code which needs to run after dom rendering
}
</code></pre>

<p>}
$timeout(waitForRenderAndDoSomething); // Waits for first digest cycle
```</p>

<p>Hopefully AngularJS will come up with a easier solution in future releases.</p>

<h4>Note</h4>

<p>The <a href="https://docs.angularjs.org/api/ng/service/$http#pendingRequests">$http.pendingRequests</a> supposed to be used for debugging purpose only. If angular team decides to remove this, you can implement the same using http interceptors as suggested in this <a href="http://stackoverflow.com/a/20062899/69362">link</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging angular view bindings]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/debugging-angular-view-bindings"/>
    <updated>2014-05-03T09:34:54+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/debugging-angular-view-bindings</id>
    <content type="html"><![CDATA[<p>The way to debug problems with <code></code> or <code>ng-bind</code> or any other directive is to use <a href="https://docs.angularjs.org/api/ng/function/angular.element">angular.element</a> method.</p>

<!-- more -->


<p>Example: If you want to debug missing data in <code>&lt;span>Name : &lt;/span></code></p>

<ul>
<li>Right click on the span and click Inspect element. Make sure span is selected in the elements tab</li>
<li>Go to console tab and type</li>
</ul>


<p><code>js
angular.element($0).scope().pesron.fullName()
</code>
Using <code>angular.element($0).scope()</code> you can inspect the data on scope. The angular.element can also get references to controller, injector using which you can inspect other objects.</p>

<p>```js
//Get controller
angular.element($0).controller()</p>

<p>//Getting injector and other objects
var injector = angular.element($0).injector()
injector.get(&lsquo;$rootScope&rsquo;)
injector.get(&lsquo;myService&rsquo;)
```</p>

<p>The other alternative is to use chrome extension <a href="https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk?hl=en">AngularJS Batarang</a>. This will add AngularJS tab in developer Tools. It lists all scopes in the current page. But finding the correct scope for a particualr element quite difficult. The &ldquo;Enable Inspector&rdquo; button in batarang doesn&rsquo;t work that well. So far the <a href="https://docs.angularjs.org/api/ng/function/angular.element">angular.element</a> is the best way to debug binding issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging angular ui-router]]></title>
    <link href="http://tech.endeepak.com/blog/2014/05/03/debugging-angular-ui-router"/>
    <updated>2014-05-03T08:21:40+05:30</updated>
    <id>http://tech.endeepak.com/blog/2014/05/03/debugging-angular-ui-router</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/angular-ui/ui-router">ui-router</a> from <a href="https://github.com/angular-ui">angular-ui</a> gives power of nested states and multiple named views which is essential for angular apps with non-trivial layout and workflow.</p>

<p>The main problem with angular ui-router is getting the route configurations right in the first time. You start seeing blank pages for misconfigured views. The sad part is these errors are not logged to console. It gets quite frustrating in tracking down the cause.</p>

<!-- more -->


<p>This where I found this <a href="http://stackoverflow.com/a/20786262/69362">stackoverflow link</a> which helps in solving this issue. If you find yourself in trouble with ui-router, just open the developer console on the browser and paste the below code.</p>

<script src="https://gist.github.com/endeepak/387102e7bc94f2ef505e.js"></script>


<h4>Some of the common mistakes made while moving fron angular&rsquo;s ng-route to ui-router are</h4>

<ul>
<li>Dependency on ui-router is not added</li>
</ul>


<p><code>js
//Make sure 'ui.router' module is added as dependency
var myApp = angular.module('myApp', ['ui.router']);
</code></p>

<ul>
<li>The parent state doesn&rsquo;t have template with ui-view</li>
</ul>


<p>```js
$stateProvider
.state(&lsquo;user&rsquo;, { //parent state</p>

<pre><code>url: '/user/:userId',
// Important that parent has a template with ui-view which the child states can replace
template: '&lt;ui-view/&gt;' 
</code></pre>

<p>})
.state(&lsquo;user.projects&rsquo;, { //child state</p>

<pre><code>url: 'projects',
templateUrl: 'projects.html',
</code></pre>

<p>})
```</p>
]]></content>
  </entry>
  
</feed>
